//<auto-generated />

using System.Linq;
using System.Reflection;
using System.Text;
using System;

namespace ExceptionReporting.Core
{
	/// <summary>
	/// Used to find and do things with referenced assemblies
	/// </summary>
	public class AssemblyReferenceDigger
	{
		private readonly Assembly _assembly;

		///<summary>Initialise with assembly</summary>
		public AssemblyReferenceDigger(Assembly assembly)
		{
			_assembly = assembly;
		}

		/// <summary> Finds all assemblies referenced and return a string </summary>
		/// <returns>line-delimited string of referenced assemblies</returns>
		public string CreateReferencesString()
		{
			var stringBuilder = new StringBuilder();

		    int count = 1;
			foreach (var assemblyName in _assembly.GetReferencedAssemblies().OrderBy(p => p.Name))
			{
				//stringBuilder.AppendLine(string.Format("{0}, Version={1}", assemblyName.Name, assemblyName.Version));
			    stringBuilder.AppendLine(String.Format("<tr><td>{0}</td><td>{1}</td><td>{2}</td></tr>", count, assemblyName.Name
			        , String.Format("Version = {0}", assemblyName.Version)));
			    count++;
			}

			return stringBuilder.ToString();
		}
	}
}
