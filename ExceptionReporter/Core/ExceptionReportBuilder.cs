//<auto-generated />

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ExceptionReporting.Extensions;
using ExceptionReporting.Config;
using ExceptionReporting.SystemInfo;

namespace ExceptionReporting.Core
{
	internal class ExceptionReportBuilder
	{
		private readonly ExceptionReportInfo _reportInfo;
		private StringBuilder _stringBuilder;
		private readonly IEnumerable<SysInfoResult> _sysInfoResults;
		private IFileReader _fileReader = new FileReader();

		public ExceptionReportBuilder(ExceptionReportInfo reportInfo)
		{
			_reportInfo = reportInfo;
		}

		public ExceptionReportBuilder(ExceptionReportInfo reportInfo, IEnumerable<SysInfoResult> sysInfoResults)
			: this(reportInfo)
		{
			_sysInfoResults = sysInfoResults;
		}

		public IFileReader FileReader
		{
			set { _fileReader = value; }
		}

		/// <summary>
		/// Build the exception report
		/// </summary>
		public ExceptionReport Build()
		{
			_stringBuilder = new StringBuilder().AppendDottedLine();

			if (_reportInfo.ShowGeneralTab) BuildGeneralInfo();
			if (_reportInfo.ShowExceptionsTab) BuildExceptionInfo();
			if (_reportInfo.ShowAssembliesTab) BuildAssemblyInfo();
			if (_reportInfo.ShowConfigTab) BuildConfigInfo();
			if (_reportInfo.ShowSysInfoTab) BuildSysInfo();
			if (_reportInfo.ShowContactTab) BuildContactInfo();

			return new ExceptionReport(_stringBuilder);
		}

		private void BuildGeneralInfo()
		{
            _stringBuilder.AppendLine("<hr/>");
		    _stringBuilder.Append("<table align=\"center\" border=\"1\" cellpadding=\"2px\" cellspacing=\"0\" width=\"100%\">")
                .Append("<tbody>")
                .Append(String.Format("<tr bgcolor=\"#70bbd9\"><th colspan=\"2\">{0}</th></tr>", "Thông tin chung"))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\">{1}</td></tr>", "Application", _reportInfo.AppName))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\">{1}</td></tr>", "Version", _reportInfo.AppVersion))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\">{1}</td></tr>", "Region", _reportInfo.RegionInfo))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\">{1}</td></tr>", "Machine", _reportInfo.MachineName))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\">{1}</td></tr>", "User", _reportInfo.UserName))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\">{1}</td></tr>", "Local IP v4", _reportInfo.LocalIPv4))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\">{1}</td></tr>", "Public IP v4", _reportInfo.PublicIPv4))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\">{1}</td></tr>", "Date", _reportInfo.ExceptionDate.ToShortDateString()))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\">{1}</td></tr>", "Time", _reportInfo.ExceptionDate.ToShortTimeString()))
                .Append("</tbody>")
                .Append("</table>");

		    _stringBuilder.AppendLine("<hr/>");
            _stringBuilder.Append("<table align=\"center\" border=\"1\" cellpadding=\"2px\" cellspacing=\"0\" width=\"100%\">")
                .Append("<tbody>")
                .Append(String.Format("<tr bgcolor=\"#70bbd9\"><th colspan=\"2\">{0}</th></tr>", "Ghi chú của người dùng"))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\"  style=\"font-weight:bold; color:#FF0000;\">{1}</td></tr>", _reportInfo.UserName, _reportInfo.UserExplanation))
                .Append(String.Format("<tr><td width=\"20%\" style=\"font-weight: bold;\">{0}</td><td width=\"*\"  style=\"font-weight:bold; color:#FF0000;\">{1}</td></tr>", "Custom message", _reportInfo.CustomMessage))
                .Append("</tbody>")
                .Append("</table>");
		}

		private void BuildExceptionInfo()
		{
            _stringBuilder.AppendLine("<hr/>");
		    for (var index = 0; index < _reportInfo.Exceptions.Count; index++)
		    {
		        var exception = _reportInfo.Exceptions[index];

				//TODO maybe omit a number when there's only 1 exception
                _stringBuilder.Append("<table align=\"center\" border=\"1\" cellpadding=\"2px\" cellspacing=\"0\" width=\"100%\" style=\"font-family:'Segoe UI', Tahoma, sans-serif\">")
                    .Append("<tbody>")
                    .Append(String.Format("<tr bgcolor=\"#70bbd9\"><th colspan=\"2\">{0}</th></tr>", String.Format("[Exception Info {0}]", index + 1)))
                    .Append(ExceptionHierarchyToString(exception))
                    .Append("</tbody>")
                    .Append("</table>");

                //_stringBuilder.AppendLine(string.Format("[Exception Info {0}]", index+1))
                //    .AppendLine()
                //    .AppendLine(ExceptionHierarchyToString(exception))
                //    .AppendLine().AppendDottedLine().AppendLine();
		    }
		}

	    private void BuildAssemblyInfo()
	    {
	    	var digger = new AssemblyReferenceDigger(_reportInfo.AppAssembly);

            _stringBuilder.AppendLine("<hr/>");
            _stringBuilder.Append("<table align=\"center\" border=\"1\" cellpadding=\"2px\" cellspacing=\"0\" width=\"100%\">")
                    .Append("<tbody>")
                    .Append(String.Format("<tr bgcolor=\"#70bbd9\"><th colspan=\"3\">{0}</th></tr>", "Assembly Info"))
                    .Append(digger.CreateReferencesString())
                    .Append("</tbody>")
                    .Append("</table>");

            //_stringBuilder.AppendLine("[Assembly Info]")
            //    .AppendLine()
            //    .AppendLine(digger.CreateReferencesString())
            //    .AppendDottedLine().AppendLine();
		}

		private void BuildConfigInfo()
        {
            var configFilePath = ConfigReader.GetConfigFilePath();
            if (!File.Exists(configFilePath))
            {
                return;
            }
			_stringBuilder.AppendLine("[Config Settings]").AppendLine();
		    _stringBuilder.AppendLine(_fileReader.ReadAll(configFilePath));
			_stringBuilder.AppendDottedLine().AppendLine();
		}

		private void BuildSysInfo()
		{
			_stringBuilder.AppendLine("[System Info]").AppendLine();
			_stringBuilder.Append(SysInfoResultMapper.CreateStringList(_sysInfoResults));
			_stringBuilder.AppendDottedLine().AppendLine();
		}

		private void BuildContactInfo()
		{
			_stringBuilder.AppendLine("[Contact Info]")
				.AppendLine()
				.AppendLine("Email:  " + _reportInfo.ContactEmail)
				.AppendLine("Web:    " + _reportInfo.WebUrl)
				.AppendLine("Phone:  " + _reportInfo.Phone)
				.AppendLine("Fax:    " + _reportInfo.Fax)
				.AppendDottedLine().AppendLine();
		}

		/// <summary>
		/// Create a line-delimited string of the exception hierarchy 
		/// //TODO see Label='EH' in View, this is doing too much and is duplicated
		/// </summary>
		private static string ExceptionHierarchyToString(Exception exception)
		{
			var currentException = exception;
			var stringBuilder = new StringBuilder();
			var count = 0;

			while (currentException != null)
			{
				if (count++ == 0)
                    stringBuilder.AppendLine("<tr bgcolor=\"#70bbd9\"><td colspan=\"2\"><span style=\"font-weight: bold;\">Top-level Exception</span></td></tr>");
				else
                    stringBuilder.AppendLine("<tr bgcolor=\"#70bbd9\"><td colspan=\"2\"><span style=\"font-weight: bold;\">Inner Exception " + (count - 1) + "</span></td></tr>");

                stringBuilder.AppendLine(
                    String.Format(
                        "<tr><td width=\"20%\"><span style=\"font-weight: bold;\">{0}</span></td><td width=\"*\">{1}</td></tr>",
                        "Type", currentException.GetType()))
                    .AppendLine(
                        String.Format(
                            "<tr><td width=\"20%\"><span style=\"font-weight: bold;\">{0}</span></td><td width=\"*\" style=\"font-weight:bold; color:#FF0000;\">{1}</td></tr>",
                            "Message", String.IsNullOrEmpty(currentException.Message) ? "" : currentException.Message.Replace(Environment.NewLine, "<br />")))
                    .AppendLine(
                        String.Format(
                            "<tr><td width=\"20%\"><span style=\"font-weight: bold;\">{0}</span></td><td width=\"*\">{1}</td></tr>",
                            "Source", String.IsNullOrEmpty(currentException.Source) ? "" : currentException.Source.Replace(Environment.NewLine, "<br />")));


			    if (currentException.StackTrace != null)
			    {
			        var stack = currentException.StackTrace.Trim();
			        string[] lines = stack.Split(new string[] {Environment.NewLine}, StringSplitOptions.None);
                    stringBuilder.AppendLine(String.Format(
                            "<tr><td width=\"20%\" rowspan=\"{0}\"><span style=\"font-weight: bold;\">{1}</span></td></tr>",
                            lines.Length + 1, "Stack Trace"));
                    foreach (var line in lines)
			        {
                        stringBuilder.AppendLine(String.Format(
                            "<tr><td width=\"*\">{0}</td></tr>", line));
			        }
			    }
				currentException = currentException.InnerException;
			}

			var exceptionString = stringBuilder.ToString();
			return exceptionString.TrimEnd();
		}
	}
}
