//<auto-generated />

#region "Author"
/****************************************************************************************
 * Solution     : CUSC His Framework
 * Project code : APP1105
 * Author       : Dương Nguyễn Phú Cường
 * Company      : Cusc Software
 * Version      : 1.0.0.1
 * Created date : 29/03/2013
 ***************************************************************************************/
#endregion

using System;
using DevExpress.Utils;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.BandedGrid;
using DevExpress.XtraEditors.Repository;
using DevExpress.Data;
using DevExpress.XtraGrid.Views.Base;
using System.Windows.Forms;

namespace KFLibrary.Win.WinForm.DevEx.Utilities
{
    public class XtraGridUtils
    {
        /* -------------------------------- Enums ------------------------------------ */
        #region "Enums"

        #endregion
        /* --------------------------------------------------------------------------- */

        /* ------------------------------- Variables --------------------------------- */
        #region "Variables"

        #endregion
        /* --------------------------------------------------------------------------- */

        /* ------------------------------ Properties --------------------------------- */
        #region "Properties"

        #endregion
        /* --------------------------------------------------------------------------- */

        /* -------------------------------- Methods ---------------------------------- */
        #region "Methods"
        /// <summary>
        /// Tạo mới GridColumn
        /// </summary>
        /// <param name="fieldName">Tên FieldName</param>
        /// <param name="caption">Tiêu đề Caption</param>
        /// <param name="isVisible"></param>
        /// <param name="visibleIndex"></param>
        /// <returns></returns>
        public static GridColumn CreateColumn(string fieldName, string caption, bool isVisible,
            int visibleIndex)
        {
            return new GridColumn
            {
                FieldName = fieldName,
                Caption = caption,
                Name = Guid.NewGuid().ToString(),
                Visible = isVisible,
                VisibleIndex = visibleIndex,
            };
        }

        #region "Calculate level GridBand"
        public static int GetMaxLevel(GridBandCollection bandCollection)
        {
            int max = 0;
            foreach (GridBand band in bandCollection)
            {
                int temp = GetLevel(band);
                if (max < temp)
                    max = temp;
            }
            return max;
        }

        public static int GetLevel(GridBand band)
        {
            if (!band.Visible)
                return 0;

            if (!band.HasChildren)
                return band.BandLevel;

            int max = band.BandLevel;
            foreach (GridBand b in band.Children)
            {
                int temp = GetLevel(b);
                if (max < temp)
                    max = temp;
            }
            return max;
        }
        #endregion

        #region "Calculate width GridBand"
        // Tính chiều rộng grid
        public static int GetWidth(GridBand band)
        {
            if (!band.Visible)
                return 0;

            // #12185, Dnpcuong(2014-12-09) : đếm chính xác số column con hiện đang có trên giao diện.
            if (!band.HasChildren)
                return band.Columns.VisibleColumnCount;

            int max = 0;
            foreach (GridBand b in band.Children)
            {
                int temp = GetWidth(b);
                max += temp;
            }
            return max;
        }
        #endregion


        /// <summary>
        /// Sets the style column header.
        /// </summary>
        /// <param name="p_Col">The p_ col.</param>
        public static void SetStyleColumnHeader(BandedGridColumn p_Col, bool p_AllowMove = true,
        AppearanceObject p_AppearanceCell = null)
        {
            p_Col.AppearanceHeader.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Italic | System.Drawing.FontStyle.Bold);
            p_Col.AppearanceHeader.Options.UseFont = true;
            p_Col.AppearanceHeader.Options.UseTextOptions = true;
            p_Col.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            p_Col.AppearanceHeader.TextOptions.WordWrap = DevExpress.Utils.WordWrap.Wrap;
            p_Col.OptionsColumn.AllowMove = p_AllowMove;

            //p_Col.AppearanceCell.TextOptions.HAlignment = HorzAlignment.Center;
            if (p_AppearanceCell != null)
                p_Col.AppearanceCell.Assign(p_AppearanceCell);
        }

        /// <summary>
        /// Sets the style band header.
        /// </summary>
        /// <param name="p_GridBand">The p_ grid band.</param>
        public static void SetStyleBandHeader(GridBand p_GridBand, bool p_AllowMove = true)
        {
            p_GridBand.AppearanceHeader.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold);
            p_GridBand.AppearanceHeader.Options.UseFont = true;
            p_GridBand.AppearanceHeader.Options.UseTextOptions = true;
            p_GridBand.AppearanceHeader.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            p_GridBand.AppearanceHeader.TextOptions.WordWrap = DevExpress.Utils.WordWrap.Wrap;
            p_GridBand.OptionsBand.AllowMove = p_AllowMove;
        }


        /// <summary>
        /// Adds the grid band to AdvGridView.
        /// </summary>
        /// <param name="p_View">The p_ view.</param>
        /// <param name="p_BandCaption">The p_ band caption.</param>
        /// <param name="p_BandName">Name of the p_ band.</param>
        /// <param name="p_BandRowCount">The p_ band row count.</param>
        /// <param name="p_UseStyleBand">if set to <c>true</c> [p_ use style band].</param>
        /// <param name="p_Col">The p_ col.</param>
        /// <param name="p_UseStyleColumn">if set to <c>true</c> [p_ use style column].</param>
        /// <param name="p_ColSummary">The p_ col summary.</param>
        /// <param name="p_ParentBand">The p_ parent band.</param>
        public static GridBand AddGridBandToAdvGridView(
            AdvBandedGridView p_View,
            string p_BandCaption,
            string p_BandName,
            byte p_BandRowCount = 1,
            bool p_UseStyleBand = false,
            BandedGridColumn p_Col = null,
            bool p_UseStyleColumn = false,
            GridColumnSummaryItem p_ColSummary = null,
            GridBand p_ParentBand = null,
            bool p_AllowMoveCol = true,
            bool p_AllowMoveBand = true)
        {
            GridBand gb = new GridBand()
            {
                Caption = p_BandCaption,
                Name = p_BandName,
                RowCount = p_BandRowCount
            };

            if (p_Col != null)
            {
                p_Col.Visible = true;
                p_Col.OptionsColumn.AllowMove = false; // Không cho di chuyển cột

                if (p_ColSummary != null)
                    p_Col.Summary.Add(p_ColSummary);
                gb.Columns.Add(p_Col);
            }

            if (p_ParentBand != null)
                p_ParentBand.Children.Add(gb);
            else
                p_View.Bands.Add(gb);

            if (p_UseStyleBand)
                SetStyleBandHeader(gb, p_AllowMoveBand);
            if (p_UseStyleColumn && p_Col != null)
                SetStyleColumnHeader(p_Col, p_AllowMoveCol);
            return gb;
        }


        /// <summary>
        /// Hàm add band vào BandedGridView
        /// </summary>
        /// <param name="p_View">BandedGridView</param>
        /// <param name="p_BandCaption">Caption (tên hiển thị)</param>
        /// <param name="p_BandName">BandName</param>
        /// <param name="p_BandRowCount">Số dòng hiển thị header band. Giá trị mặc đinh = 1</param>
        /// <param name="p_UseStyleBand">Có sử dụng định dạng header band hay không. Giá trị mặc định = false</param>
        /// <param name="p_Col">BandedGridColumn. Giá trị mặc định = null</param>
        /// <param name="p_UseStyleColumn">Có sử dụng định dang header column hay không. Giá trị mặc định = false</param>
        /// <param name="p_ColSummary">GridColumnSummaryItem. Giá trị mặc định = null</param>
        /// <param name="p_ParentBand">Band cha. Giá trị mặc định = null</param>
        /// <param name="p_AllowMoveCol">Có cho phép di chuyển column hay không. Giá trị mặc định = true</param>
        /// <param name="p_AllowMoveBand">Có cho phép di chuyển band hay không. Giá trị mặc định = true</param>
        /// <param name="p_AutoAddColumn">Tự động add Column vào view. Giá trị mặc định = false</param>
        /// <param name="p_ColumnName">ColumnName. Giá trị mặc định = ""</param>
        /// <param name="p_ColumnFieldName">FieldName của column. Giá trị mặc định = ""</param>
        /// <param name="index">Índex để add column. Giá trị mặc định = 0</param>
        public static GridBand AddGridBandToBandGridView(
            BandedGridView p_View,
            string p_BandCaption,
            string p_BandName,
            byte p_BandRowCount = 1,
            bool p_UseStyleBand = false,
            BandedGridColumn p_Col = null,
            bool p_UseStyleColumn = false,
            GridColumnSummaryItem p_ColSummary = null,
            GridBand p_ParentBand = null,
            bool p_AllowMoveCol = true,
            bool p_AllowMoveBand = true,
            bool p_AutoAddColumn = false,
            string p_ColumnName = "",
            string p_ColumnFieldName = "",
            int index = 0)
        {
            GridBand gb = new GridBand()
            {
                Caption = p_BandCaption,
                Name = p_BandName,
                RowCount = p_BandRowCount
            };
            if (p_Col != null)
            {
                p_Col.Visible = true;
                p_Col.OptionsColumn.AllowMove = false; // Không cho di chuyển cột

                if (p_ColSummary != null)
                    p_Col.Summary.Add(p_ColSummary);
                gb.Columns.Add(p_Col);
                if (p_AutoAddColumn)
                {
                    AddColum(p_View, p_Col, p_ColumnFieldName, p_ColumnName, index);
                }
            }
            if (p_Col.View != null)
            {
                if (p_ParentBand != null)
                    p_ParentBand.Children.Add(gb);
                else
                    p_View.Bands.Add(gb);
            }
            else
                MessageBox.Show("Lỗi chưa add BandedGridColumn");


            if (p_UseStyleBand)
                SetStyleBandHeader(gb, p_AllowMoveBand);
            if (p_UseStyleColumn && p_Col != null)
                SetStyleColumnHeader(p_Col, p_AllowMoveCol);
            return gb;
        }

        /// <summary>
        /// Tạo cột STT dạng UnboundColumn
        /// </summary>
        /// <param name="p_View"></param>
        /// <param name="p_EventArgs"></param>
        /// <param name="p_StartNum"></param>
        public static void TaoCotSTT(AdvBandedGridView p_View, CustomColumnDataEventArgs p_EventArgs,
        int p_StartNum = 1)
        {
            if (p_EventArgs.Column.FieldName == "STT" && p_EventArgs.IsGetData)
            {
                int num = p_View.GetRowHandle(p_EventArgs.ListSourceRowIndex) + 1;
                if (num >= p_StartNum)
                    p_EventArgs.Value = num - p_StartNum + 1;
            }
        }
        public static void AddColum(BandedGridView view, BandedGridColumn col, String FieldName, String Name, Int32 index)
        {
            col.Name = Name;
            col.FieldName = FieldName;
            view.Columns.Insert(index, col);
        }

        /// <summary>
        /// Hàm canh chỉnh band, column trên grid
        /// </summary>
        /// <param name="band">Band</param>
        /// <param name="w_band">độ rộng của band</param>
        /// <param name="col">Cột</param>
        /// <param name="horAlignment">Canh chỉnh trái, phải, giữa</param>
        /// <param name="wrap">Kiểu wrapText</param>
        /// <param name="edit">Gán ColumnEdit</param>
        /// <param name="isSumary">Có summary hay không</param>
        /// <param name="summaryType">Kiểu summary là sum hoặc count, ....</param>
        /// <param name="strFormat">chuỗi định dạng DisplayFormat cho summary</param>
        public static void SetTypeColumn_Band(GridBand band = null, int w_band = 0, BandedGridColumn col = null, DevExpress.Utils.HorzAlignment horAlignment = HorzAlignment.Default, WordWrap wrap = WordWrap.Default
            , RepositoryItem edit = null
            , bool isSumary = false, SummaryItemType summaryType = SummaryItemType.None, string strFormat = "")
        {
            if (band != null)
            {
                band.Width = w_band;
                band.AppearanceHeader.TextOptions.WordWrap = wrap;
            }

            if (col != null)
            {
                if (isSumary)
                {
                    col.SummaryItem.SummaryType = summaryType;
                    col.SummaryItem.DisplayFormat = strFormat;
                }
                col.AppearanceCell.TextOptions.HAlignment = horAlignment;
                col.ColumnEdit = edit;
            }
        }

        /// <summary>
        /// Hàm tìm Band trên Grid theo tên
        /// </summary>
        /// <param name="name">Tên band</param>
        /// <param name="band">GridBand cần tìm (parentBand)</param>
        /// <returns></returns>
        public static GridBand FindBand(String name, GridBand band)
        {
            if (band.HasChildren)
            {
                foreach (GridBand b in band.Children)
                {
                    var temp = FindBand(name, b);
                    if (temp != null)
                        return temp;
                }
            }

            if (band.Name == name)
                return band;
            else
                return null;
        }
        #endregion
        /* --------------------------------------------------------------------------- */

        /* --------------------------- Event handlers--------------------------------- */
        #region "Event handlers"

        #endregion
        /* --------------------------------------------------------------------------- */

        /* ------------------------------ Sub classes -------------------------------- */
        #region "Sub classes"

        #endregion
        /* --------------------------------------------------------------------------- */

        /* --------------------------------- Test ------------------------------------ */
        #region "Tests"

        // Method test code
        private void Test()
        {
            // Todo: test code here
        }

        #endregion
        /* --------------------------------------------------------------------------- */
    }
}
