//<auto-generated />

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using KFLibrary.DataTypes.Extensions;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.DXErrorProvider;

namespace KFLibrary.Win.WinForm.DevEx.Controls
{
    [Designer(typeof(SoTheBhytDesigner))]
    [DefaultBindingProperty("FullText")]
    [DefaultEvent("SoTheBhytValidated")]
    [ToolboxBitmap(typeof(SoTheBhyt), "SoTheBhyt.bmp")]
    public partial class SoTheBhyt : XtraUserControl
    {
        /* ------------------------------- Variables --------------------------------- */
        #region "Variables"
        
        [Category("Số thẻ Bhyt")]
        public event EventHandler SoTheBhytValidated;

        [Category("Số thẻ Bhyt")]
        public event PreviewKeyDownEventHandler Text01_PreviewKeyDown;


        private char _spilitChar = '-';
        private List<MaDoiTuongBhyt> _lstDoiTuongBhyt;

        public static List<MaDoiTuongBhyt> DatasourceDoiTuongBhyt { get; set; }
        #endregion
        /* --------------------------------------------------------------------------- */

        /* ------------------------------ Properties --------------------------------- */
        #region "Properties"

        ///// <summary>
        ///// Get/Set Mã đối tượng BHTY datasource
        ///// </summary>
        //[AttributeProvider(typeof(IListSource))]
        //[Category("Số thẻ Bhyt")]
        //[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        //public object DataSource
        //{
        //    get
        //    {
        //        return this.glkp01.Properties.DataSource;
        //    }
        //    set
        //    {
        //        this.glkp01.Properties.DataSource = value;
        //    }
        //}

        [DefaultValue("")]
        [Category("Số thẻ Bhyt")]
        [Description("Get/Set số thẻ BHYT theo quy định.")]
        [Bindable(true)]
        [RefreshProperties(System.ComponentModel.RefreshProperties.All)]
        public string FullText
        {
            get
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(this.Text01);
                sb.Append(this.Text02);
                sb.Append(this.Text03);
                sb.Append(this.Text04);
                sb.Append(this.Text05);
                sb.Append(this.Text06);

                return sb.ToString();
            }
            set
            {
                string temp = value; // Chuỗi tạm
                if (String.IsNullOrEmpty(temp))
                {
                    ClearText();
                    return;
                }

                // TE12345678901234
                // Text 01
                var tempText01 = temp.Left(this.glkp01.Properties.MaxLength);
                this.glkp01.EditValue = _lstDoiTuongBhyt.Where(p => p.Ma == tempText01).FirstOrDefault().Id;
                //this.glkp01.Text = temp.Left(this.glkp01.Properties.MaxLength);
                temp = temp.Substring(this.glkp01.Text.Length);

                // Text 02
                this.txt02.Text = temp.Left(this.txt02.Properties.MaxLength);
                temp = temp.Substring(this.txt02.Text.Length);

                // Text 03
                this.txt03.Text = temp.Left(this.txt03.Properties.MaxLength);
                temp = temp.Substring(this.txt03.Text.Length);

                // Text 04
                this.txt04.Text = temp.Left(this.txt04.Properties.MaxLength);
                temp = temp.Substring(this.txt04.Text.Length);

                // Text 05
                this.txt05.Text = temp.Left(this.txt05.Properties.MaxLength);
                temp = temp.Substring(this.txt05.Text.Length);

                // Text 06
                this.txt06.Text = temp.Left(this.txt06.Properties.MaxLength);
                temp = temp.Substring(this.txt06.Text.Length);

                // ReadOnly Text
                this.txtReadOnly.Text = GetFullTextFormat(_spilitChar);
            }
        }

        

        #region "Nơi đăng ký khám chữa bệnh"

        [DefaultValue("")]
        [Category("Số thẻ Bhyt")]
        [Description("")]
        public string FullTextNoiDangKy
        {
            get
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(this.TextMaTinh);
                sb.Append(this.TextMaNoiDangKy);

                return sb.ToString();
            }
            set
            {
                string temp = value; // Chuỗi tạm
                if (String.IsNullOrEmpty(temp))
                {
                    ClearTextNoiDangKy();
                    return;
                }

                // TE12345678901234
                // Text mã tỉnh
                this.txtMaTinh.Text = temp.Left(this.txtMaTinh.Properties.MaxLength);
                temp = temp.Substring(this.txtMaTinh.Text.Length);

                // Text mã nơi đăng ký
                this.txtMaNoiDangKy.Text = temp.Left(this.txtMaNoiDangKy.Properties.MaxLength);
                temp = temp.Substring(this.txtMaNoiDangKy.Text.Length);

                // ReadOnly Text
                this.txtReadOnlyNoiDangKy.Text = GetFullTextNoiDangKyFormat(_spilitChar);
            }
        }

        [DefaultValue("")]
        [Category("Số thẻ Bhyt")]
        [Description("")]
        public string TextMaTinh
        {
            get
            {
                return txtMaTinh.Text;
            }
            set
            {
                txtMaTinh.Text = Validator.ConvertStringToValid(value, txtMaTinh);
            }
        }

        [DefaultValue("")]
        [Category("Số thẻ Bhyt")]
        [Description("")]
        public string TextMaNoiDangKy
        {
            get
            {
                return txtMaNoiDangKy.Text;
            }
            set
            {
                txtMaNoiDangKy.Text = Validator.ConvertStringToValid(value, txtMaNoiDangKy);
            }
        }

        #endregion

        /// <summary>
        /// 
        /// </summary>
        [DefaultValue(false)]
        [Category("Số thẻ Bhyt")]
        [Description("Bật/Tắt chức năng read-only.")]
        public bool ReadOnly
        {
            get
            {
                return (glkp01.Properties.ReadOnly 
                    && txt03.Properties.ReadOnly 
                    && txt04.Properties.ReadOnly
                    && txt05.Properties.ReadOnly 
                    && txt06.Properties.ReadOnly);
            }
            set
            {
                glkp01.Properties.ReadOnly 
                    = txt03.Properties.ReadOnly 
                    = txt04.Properties.ReadOnly
                    = txt05.Properties.ReadOnly 
                    = txt06.Properties.ReadOnly
                    = value;

                if (value == true)
                {
                    layoutControl1.HideItem(lcgEditable);
                    lcgReadOnly.RestoreFromCustomization();
                    this.txtReadOnly.Text = GetFullTextFormat(_spilitChar);
                }
                else
                {
                    layoutControl1.HideItem(lcgReadOnly);
                    lcgEditable.RestoreFromCustomization();
                }
            }
        }

        [DefaultValue(true)]
        [Category("Số thẻ Bhyt")]
        public bool FontBold
        {
            get
            {
                return (this.glkp01.Properties.Appearance.Font.Bold
                    && this.txt02.Properties.Appearance.Font.Bold
                    && this.txt03.Properties.Appearance.Font.Bold
                    && this.txt04.Properties.Appearance.Font.Bold
                    && this.txt05.Properties.Appearance.Font.Bold
                    && this.txt06.Properties.Appearance.Font.Bold);
            }
            set
            {
                bool temp = value;
                this.glkp01.Properties.Appearance.Font
                    = this.txt02.Properties.Appearance.Font
                    = this.txt03.Properties.Appearance.Font
                    = this.txt04.Properties.Appearance.Font
                    = this.txt05.Properties.Appearance.Font
                    = this.txt06.Properties.Appearance.Font
                    = this.txtReadOnly.Properties.Appearance.Font
                    = new Font("Tahoma", 9.75F, temp ? FontStyle.Bold : FontStyle.Regular, GraphicsUnit.Point, ((byte)(0)));
            }
        }

        [Category("Số thẻ Bhyt")]
        public int MaxLength
        {
            get
            {
                int maxLength = glkp01.Properties.MaxLength
                        + txt02.Properties.MaxLength
                        + txt03.Properties.MaxLength
                        + txt04.Properties.MaxLength
                        + txt05.Properties.MaxLength
                        + txt06.Properties.MaxLength;
                return maxLength;
            }
        }

        public bool HasError
        {
            get
            {
                return dxErrorProvider1.HasErrors;
            }
        }

        public char SplitChar
        {
            get
            {
                return _spilitChar;
            }
            set
            {
                _spilitChar = value;

                // Thay đổi text trong Text readonly
                txtReadOnly.Text = GetFullTextFormat(_spilitChar);
            }
        }

        [DefaultValue("")]
        [Category("Số thẻ Bhyt")]
        [Description("Ký hiệu bằng chữ (theo bảng chữ cái latin), là mã đối tượng tham gia BHYT")]
        public string Text01
        {
            get
            {
                return glkp01.Text;
            }
            set
            {
                glkp01.Text = Validator.ConvertStringToValid(value, glkp01);
            }
        }

        [DefaultValue("")]
        [Category("Số thẻ Bhyt")]
        [Description("Ký hiệu bằng số (theo số thứ tự từ 1 đến 9), quy định mức hưởng BHYT")]
        public string Text02
        {
            get
            {
                return txt02.Text;
            }
            set
            {
                txt02.Text = Validator.ConvertStringToValid(value, txt02);
            }
        }

        [DefaultValue("")]
        [Category("Số thẻ Bhyt")]
        [Description("Ký hiệu bằng số (từ 01 đến 99) là mã tỉnh, thành phố trực thuộc Trung ương, nơi phát hành thẻ BHYT (theo mã tỉnh, thành phố ban hành kèm theo Quyết định số 124/2004/QĐ-TTg ngày 08/7/2004 của Thủ tướng Chính phủ và công văn số 628/TCTK-PPCĐ ngày 06/8/2009 của Tổng cục Thống kê)")]
        public string Text03
        {
            get
            {
                return txt03.Text;
            }
            set
            {
                txt03.Text = Validator.ConvertStringToValid(value, txt03);
            }
        }

        [DefaultValue("")]
        [Category("Số thẻ Bhyt")]
        [Description("Ký hiệu bằng số (từ 01 đến 99) là mã quận, huyện, thị xã, thành phố trực thuộc tỉnh, nơi quản lý đầu mối của người tham gia BHYT (theo thứ tự huyện quy định tại Quyết định số 124/2004/QĐ-TTg và công văn số 628/TCTK-PPCĐ). Riêng đối tượng do tỉnh trực tiếp thu có ký hiệu 00")]
        public string Text04
        {
            get
            {
                return txt04.Text;
            }
            set
            {
                txt04.Text = Validator.ConvertStringToValid(value, txt04);
            }
        }

        [DefaultValue("")]
        [Category("Số thẻ Bhyt")]
        [Description("Ký hiệu bằng số (từ 001 đến 999) là mã đơn vị quản lý, theo địa giới hành chính và theo loại đối tượng. Trong đó, đối tượng do xã quản lý (bao gồm cả người lao động làm việc trong tổ hợp tác, hộ sản xuất kinh doanh cá thể), lấy ký tự đầu ký hiệu bằng số 9 (901, 999).")]
        public string Text05
        {
            get
            {
                return txt05.Text;
            }
            set
            {
                txt05.Text = Validator.ConvertStringToValid(value, txt05);
            }
        }

        [DefaultValue("")]
        [Category("Số thẻ Bhyt")]
        [Description("Ký hiệu bằng số (theo số tự nhiên từ 00001 đến 99999), là số thứ tự của người tham gia BHYT trong 01 đơn vị.")]
        public string Text06
        {
            get
            {
                return txt06.Text;
            }
            set
            {
                txt06.Text = Validator.ConvertStringToValid(value, txt06);
            }
        }

        
        #endregion
        /* --------------------------------------------------------------------------- */

        /* -------------------------------- Methods ---------------------------------- */
        #region "Methods"

        /// <summary>
        /// Initializes a new instance of the <see cref="SoTheBhyt"/> class.
        /// </summary>
        public SoTheBhyt()
        {
            // Init datasource
            //_lstDoiTuongBhyt = ModelHelper.CreateListMaDoiTuongBhyt();
            _lstDoiTuongBhyt = SoTheBhyt.DatasourceDoiTuongBhyt;
            InitializeComponent();
            glkp01.PreviewKeyDown += new PreviewKeyDownEventHandler(Clear_PreviewKeyDown);
            txt02.PreviewKeyDown += new PreviewKeyDownEventHandler(Clear_PreviewKeyDown);
            txt03.PreviewKeyDown += new PreviewKeyDownEventHandler(Clear_PreviewKeyDown);
            txt04.PreviewKeyDown += new PreviewKeyDownEventHandler(Clear_PreviewKeyDown);
            txt05.PreviewKeyDown += new PreviewKeyDownEventHandler(Clear_PreviewKeyDown);
            txt06.PreviewKeyDown += new PreviewKeyDownEventHandler(Clear_PreviewKeyDown);
        }

        public void SetText(string str01, string str02, string str03, string str04,
            string str05, string str06)
        {
            this.Text01 = str01;
            this.Text02 = str02;
            this.Text03 = str03;
            this.Text04 = str04;
            this.Text05 = str05;
            this.Text06 = str06;
        }

        public void ClearText()
        {
            glkp01.EditValue = null;
            txt02.Text = String.Empty;
            txt03.Text = String.Empty;
            txt04.Text = String.Empty;
            txt05.Text = String.Empty;
            txt06.Text = String.Empty;
            txtReadOnly.Text = String.Empty;
        }

        public void ClearTextNoiDangKy()
        {
            txtMaTinh.Text = String.Empty;
            txtMaNoiDangKy.Text = string.Empty;
            txtReadOnlyNoiDangKy.Text = string.Empty;
        }

        public bool IsValid()
        {
            try
            {
                string temp = this.FullText;

                // Không đủ độ dài
                if (this.FullText.Length != this.MaxLength)
                {
                    return false;
                }

                //this.Text01 = this.glkp01.Text;
                this.Text02 = this.txt02.Text;
                this.Text03 = this.txt03.Text;
                this.Text04 = this.txt04.Text;
                this.Text05 = this.txt05.Text;
                this.Text06 = this.txt06.Text;

                //// Kiểm tra hợp lệ ô thứ 2 (mức hưởng BHYT)
                //if (glkp01.EditValue == null)
                //{
                //    return false;
                //}
                return true;
            }
            catch
            {
                return false;
            }
        }

        public void SetError(string errorText, ErrorType errorType = ErrorType.Default)
        {
            dxErrorProvider1.SetError(glkp01, errorText, errorType);
        }

        public void SetFocus()
        {
            if (this.glkp01.Text.Length < 1)
            {
                glkp01.Focus();
            }
            else if (this.txt02.Text.Length < 1)
            {
                txt02.Focus();
            }
            else if (this.txt03.Text.Length < 1)
            {
                txt03.Focus();
            }
            else if (this.txt04.Text.Length < 1)
            {
                txt04.Focus();
            }
            else if (this.txt05.Text.Length < 1)
            {
                txt05.Focus();
            }
            else
            {
                txt06.Focus();
            }
        }

        public void SetFocusText03()
        {
            txt03.Focus();
        }

        public void SetFocus(int index)
        {
            switch (index)
            {
                case 1:
                    glkp01.Focus();
                    break;
                case 2:
                    txt02.Focus();
                    break;
                case 3:
                    txt03.Focus();
                    break;
                case 4:
                    txt04.Focus();
                    break;
                case 5:
                    txt05.Focus();
                    break;
                case 6:
                    txt06.Focus();
                    break;
                default:
                    txt06.Focus();
                    break;
            }
        }

        public string GetFullTextFormat(char customChar = '-')
        {
            char spilitChar;
            // Nếu là custom char
            if (customChar.Equals(this.SplitChar) == false)
            {
                spilitChar = customChar;
            }
            else // Nếu không mặc định lấy theo property
            {
                spilitChar = this.SplitChar;
            }

            StringBuilder sb = new StringBuilder();
            sb.Append(this.Text01);
            sb.Append(spilitChar);
            sb.Append(this.Text02);
            sb.Append(spilitChar);
            sb.Append(this.Text03);
            sb.Append(spilitChar);
            sb.Append(this.Text04);
            sb.Append(spilitChar);
            sb.Append(this.Text05);
            sb.Append(spilitChar);
            sb.Append(this.Text06);
            return sb.ToString();
        }

        public string GetFullTextNoiDangKyFormat(char customChar = '-')
        {
            char spilitChar;
            // Nếu là custom char
            if (customChar.Equals(this.SplitChar) == false)
            {
                spilitChar = customChar;
            }
            else // Nếu không mặc định lấy theo property
            {
                spilitChar = this.SplitChar;
            }

            StringBuilder sb = new StringBuilder();
            sb.Append(this.TextMaTinh);
            sb.Append(spilitChar);
            sb.Append(this.TextMaNoiDangKy);
            return sb.ToString();
        }

        #endregion
        /* --------------------------------------------------------------------------- */

        /* --------------------------- Event handlers--------------------------------- */
        #region "Event handlers"
        
        /// <summary>
        /// Handles the Load event of the SoTheBHYT control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
        private void SoTheBHYT_Load(object sender, EventArgs e)
        {
            glkp01.Properties.DataSource = _lstDoiTuongBhyt;
        }

        #region "TextEdit Ô 1"
        private void glkp01_TextChanged(object sender, EventArgs e)
        {
            GridLookUpEdit glkp = sender as GridLookUpEdit;

            // Next control
            if (glkp.Text.Length == glkp.Properties.MaxLength)
            {
                //txtO2.Focus();
                //glkp.SendKey(new KeyEventArgs(Keys.Space));
            }
        }

        private void glkp01_KeyDown(object sender, KeyEventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Previous control
            if (txtControl.SelectionStart == 0
                && e.KeyCode == Keys.Left)
            {
                return;
            }

            if (txtControl.Text.Length == 0
                && e.KeyCode == Keys.Back)
            {
                return;
            }

            // Next control
            if (txtControl.SelectionStart == txtControl.Text.Length
                && e.KeyCode == Keys.Right)
            {
                txt03.Focus();
            }
        }

        private void glkp01_EditValueChanged(object sender, EventArgs e)
        {
            //var currentRow = glkp01.Properties.View.GetFocusedRow() as MaDoiTuongBhyt;
            //var currentRow = glkp01.GetSelectedDataRow() as MaDoiTuongBhyt;
            var currentRow = glkp01.Properties.GetRowByKeyValue(glkp01.EditValue) as MaDoiTuongBhyt;
            if (currentRow == null)// || glkp01.EditValue == null)
            {
                txt02.Text = String.Empty;
            }
            else
            {
                txt02.Text = currentRow.MucHuong.ToString();
            }

            // Còn lỗi HT5 - HT2

        }

        private void glkp01_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            // Raise event
            if (Text01_PreviewKeyDown != null)
            {
                Text01_PreviewKeyDown(glkp01, e);
            }
        }
        #endregion

        #region "TextEdit Ô 2"
        private void txtO2_TextChanged(object sender, EventArgs e)
        {
            //TextEdit txtControl = sender as TextEdit;

            //// Next control
            //if (txtControl.Text.Length == txtControl.Properties.MaxLength)
            //{
            //    txt03.Focus();
            //}
        }

        private void txtO2_KeyDown(object sender, KeyEventArgs e)
        {
            //TextEdit txtControl = sender as TextEdit;

            //// Previous control
            //if (txtControl.Text.Length == 0
            //    && e.KeyCode == Keys.Back)
            //{
            //    glkp01.Focus();
            //}
        }

        #endregion

        #region "TextEdit Ô 3"
        private void txtO3_TextChanged(object sender, EventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Next control
            if (txtControl.Text.Length == txtControl.Properties.MaxLength)
            {
                txt04.Focus();
            }
        }

        private void txtO3_KeyDown(object sender, KeyEventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Previous control
            if (txtControl.SelectionStart == 0
                && e.KeyCode == Keys.Left)
            {
                glkp01.Focus();
                return;
            }

            if (txtControl.Text.Length == 0
                && e.KeyCode == Keys.Back)
            {
                glkp01.Focus();
                return;
            }

            // Next control
            if (txtControl.SelectionStart == txtControl.Text.Length
                && e.KeyCode == Keys.Right)
            {
                txt04.Focus();
            }
        }

        #endregion

        #region "TextEdit Ô 4"
        private void txtO4_TextChanged(object sender, EventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Next control
            if (txtControl.Text.Length == txtControl.Properties.MaxLength)
            {
                txt05.Focus();
            }
        }

        private void txtO4_KeyDown(object sender, KeyEventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Previous control
            if (txtControl.SelectionStart == 0
                && e.KeyCode == Keys.Left)
            {
                txt03.Focus();
                return;
            }

            if (txtControl.Text.Length == 0
                && e.KeyCode == Keys.Back)
            {
                txt03.Focus();
                return;
            }

            // Next control
            if (txtControl.SelectionStart == txtControl.Text.Length
                && e.KeyCode == Keys.Right)
            {
                txt05.Focus();
            }
        }
        #endregion

        #region "TextEdit Ô 5"
        private void txtO5_TextChanged(object sender, EventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Next control
            if (txtControl.Text.Length == txtControl.Properties.MaxLength)
            {
                txt06.Focus();
            }
        }

        private void txtO5_KeyDown(object sender, KeyEventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Previous control
            if (txtControl.SelectionStart == 0
                && e.KeyCode == Keys.Left)
            {
                txt04.Focus();
                return;
            }

            if (txtControl.Text.Length == 0
                && e.KeyCode == Keys.Back)
            {
                txt04.Focus();
                return;
            }

            // Next control
            if (txtControl.SelectionStart == txtControl.Text.Length
                && e.KeyCode == Keys.Right)
            {
                txt06.Focus();
            }
        }
        #endregion

        #region "TextEdit Ô 6"
        private void txtO6_TextChanged(object sender, EventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Next control
            if (txtControl.Text.Length == txtControl.Properties.MaxLength)
            {
                //txtO6.Focus();
            }
        }

        private void txtO6_KeyDown(object sender, KeyEventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Previous control
            if (txtControl.SelectionStart == 0
                && e.KeyCode == Keys.Left)
            {
                txt05.Focus();
                return;
            }

            if (txtControl.Text.Length == 0
                && e.KeyCode == Keys.Back)
            {
                txt05.Focus();
                return;
            }

            // Next control
            if (txtControl.SelectionStart == txtControl.Text.Length
                && e.KeyCode == Keys.Right)
            {
            }
        }
        #endregion

        private void PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            if (e.KeyCode == Keys.Enter
                || e.KeyCode == Keys.Tab)
            {
                TextEdit txt = sender as TextEdit;

                // Nếu readonly thì return
                if (txt.Properties.ReadOnly == true)
                {
                    return;
                }

                // Không được rỗng
                if (String.IsNullOrEmpty(this.FullText))
                {
                    return;
                }

                // Kiểm tra hợp lệ
                bool success = this.IsValid();
                if (success == false)
                {
                    return;
                }

                // Raise event
                if (SoTheBhytValidated != null)
                {
                    SoTheBhytValidated(this, new EventArgs());
                }
            }
        }

        private void Clear_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            if (e.KeyData == (Keys.Control | Keys.Delete))
            {
                this.FullText = null;
                this.SetFocus();
            }
        }
        #endregion
        /* --------------------------------------------------------------------------- */

        /* ------------------------------ Sub classes--------------------------------- */
        #region "Sub classes"

        #endregion
        /* --------------------------------------------------------------------------- */

        /* --------------------------------- Test ------------------------------------ */
        #region "Test"
        // Method dùng cho việc test View
        private void Test()
        {
            // TODO: Test here
        }
        #endregion
        /* --------------------------------------------------------------------------- */
    }
}
