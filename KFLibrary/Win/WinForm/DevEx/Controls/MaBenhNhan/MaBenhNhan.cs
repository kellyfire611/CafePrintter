//<auto-generated />

using System;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using KFLibrary.DataTypes.Extensions;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.DXErrorProvider;

namespace KFLibrary.Win.WinForm.DevEx.Controls
{
    /*
     * Hỗ trợ nhập nhanh số 0 ở đầu
     * Gán cứng BN, readonly BN
     * làm lại sự kiện validated sử dụng event PreviewKeyDown
     */

    [Designer(typeof(MaBenhNhanDesigner))]
    [DefaultBindingProperty("FullText")]
    [DefaultEvent("MaBenhNhanValidated")]
    public partial class MaBenhNhan : XtraUserControl
    {
        /* ------------------------------- Variables --------------------------------- */
        #region "Variables"
        
        private DateTime? _currentDateTime = null;
        private char _spilitChar = '-';

        [Category("Mã bệnh nhân")]
        public event EventHandler MaBenhNhanValidated;

        [Category("Mã bệnh nhân")]
        public event PreviewKeyDownEventHandler Text03_PreviewKeyDown;

        [Category("Mã bệnh nhân")]
        public event PreviewKeyDownEventHandler Text01_PreviewKeyDown;

        #endregion
        /* --------------------------------------------------------------------------- */

        /* ------------------------------ Properties --------------------------------- */
        #region "Properties"


        [DefaultValue("")]
        [Category("Mã bệnh nhân")]
        [Description("")]
        [Bindable(true)]
        [RefreshProperties( System.ComponentModel.RefreshProperties.All)]
        public string FullText
        {
            get
            {
                StringBuilder sb = new StringBuilder();
                sb.Append(this.Text01);
                sb.Append(this.Text02);
                sb.Append(this.Text03);

                return sb.ToString();
            }
            set
            {
                string temp = value; // Chuỗi tạm
                if (String.IsNullOrEmpty(temp))
                {
                    ClearText();
                    return;
                }

                // Text 01
                this.txt01.Text = temp.Left(this.txt01.Properties.MaxLength);
                temp = temp.Substring(this.txt01.Text.Length);

                // Text 02
                this.txt02.Text = temp.Left(this.txt02.Properties.MaxLength);
                temp = temp.Substring(this.txt02.Text.Length);

                // Text 03
                this.txt03.Text = temp.Left(this.txt03.Properties.MaxLength);
                temp = temp.Substring(this.txt03.Text.Length);

                // ReadOnly Text
                this.txtReadOnly.Text = GetFullTextFormat(_spilitChar);
            }
        }

        [DefaultValue(false)]
        [Category("Mã bệnh nhân")]
        [Description("Bật/Tắt chức năng read-only.")]
        public bool ReadOnly
        {
            get
            {
                return (txt01.Properties.ReadOnly
                    && txt02.Properties.ReadOnly
                    && txt03.Properties.ReadOnly);
            }
            set
            {
                txt01.Properties.ReadOnly
                    = txt02.Properties.ReadOnly
                    = txt03.Properties.ReadOnly
                    = value;

                if (value == true)
                {
                    layoutControl1.HideItem(lcgEditable);
                    lcgReadOnly.RestoreFromCustomization();
                    this.txtReadOnly.Text = GetFullTextFormat(_spilitChar);
                }
                else
                {
                    layoutControl1.HideItem(lcgReadOnly);
                    lcgEditable.RestoreFromCustomization();
                }
            }
        }

        [DefaultValue(true)]
        [Category("Mã bệnh nhân")]
        public bool FontBold
        {
            get
            {
                return (this.txt01.Properties.Appearance.Font.Bold
                    && this.txt02.Properties.Appearance.Font.Bold
                    && this.txt03.Properties.Appearance.Font.Bold);
            }
            set
            {
                bool temp = value;
                this.txt01.Properties.Appearance.Font
                    = this.txt02.Properties.Appearance.Font
                    = this.txt03.Properties.Appearance.Font
                    = this.txtReadOnly.Properties.Appearance.Font
                    = new Font("Tahoma", 9.75F, temp ? FontStyle.Bold : FontStyle.Regular, GraphicsUnit.Point, ((byte)(0)));
            }
        }

        [Category("Mã bệnh nhân")]
        public int MaxLength
        {
            get
            {
                int maxLength = txt01.Properties.MaxLength
                        + txt02.Properties.MaxLength
                        + txt03.Properties.MaxLength;
                return maxLength;
            }
        }

        public bool HasError
        {
            get
            {
                return dxErrorProvider1.HasErrors;
            }
        }

        public char SplitChar
        {
            get
            {
                return _spilitChar;
            }
            set
            {
                _spilitChar = value;

                // Thay đổi text trong Text readonly
                txtReadOnly.Text = GetFullTextFormat(_spilitChar);
            }
        }

        [DefaultValue("")]
        [Category("Mã bệnh nhân")]
        [Description("")]
        public string Text01
        {
            get
            {
                return txt01.Text;
            }
            set
            {
                txt01.Text = Validator.ConvertStringToValid(value, txt01);
            }
        }

        [DefaultValue("")]
        [Category("Mã bệnh nhân")]
        [Description("")]
        public string Text02
        {
            get
            {
                return txt02.Text;
            }
            set
            {
                txt02.Text = Validator.ConvertStringToValid(value, txt02);
            }
        }

        [DefaultValue("")]
        [Category("Mã bệnh nhân")]
        [Description("")]
        public string Text03
        {
            get
            {
                return txt03.Text;
            }
            set
            {
                txt03.Text = Validator.ConvertStringToValid(value, txt03);
            }
        }

        [DefaultValue("")]
        [Category("Mã bệnh nhân")]
        [Description("")]
        public char PasswordChar
        {
            get
            {
                return txt01.Properties.PasswordChar;
            }
            set
            {
                txt01.Properties.PasswordChar
                    = txt02.Properties.PasswordChar
                    = txt03.Properties.PasswordChar = value;
            }
        }
        #endregion
        /* --------------------------------------------------------------------------- */

        /* -------------------------------- Methods ---------------------------------- */
        #region "Methods"
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MaBenhNhan"/> class.
        /// </summary>
        public MaBenhNhan()
        {
            InitializeComponent();

            txt01.PreviewKeyDown += new PreviewKeyDownEventHandler(Clear_PreviewKeyDown);
            txt02.PreviewKeyDown += new PreviewKeyDownEventHandler(Clear_PreviewKeyDown);
            txt03.PreviewKeyDown += new PreviewKeyDownEventHandler(Clear_PreviewKeyDown);
        }

        public void ClearText()
        {
            txt01.Text = String.Empty;
            txt02.Text = String.Empty;
            txt03.Text = String.Empty;

            txtReadOnly.Text = String.Empty;
        }

        public void NextNumber(string text)
        {
            if (String.IsNullOrEmpty(text))
            {
                return;
            }

            // Lấy 6 số cuối
            this.FullText = text;
            string temp = text.Substring(text.Length - txt03.Properties.MaxLength);

            try
            {
                decimal num = Convert.ToDecimal(temp);
                num = num + 1;

                this.Text03 = num.ToString().PadLeft(txt03.Properties.MaxLength, '0');

            }
            catch (Exception ex)
            {
            }
        }

        public bool IsValid()
        {
            try
            {
                string temp = this.FullText;

                // Không đủ độ dài
                if (this.FullText.Length != this.MaxLength)
                {
                    return false;
                }

                this.Text01 = this.txt01.Text;
                this.Text02 = this.txt02.Text;
                this.Text03 = this.txt03.Text;

                return true;
            }
            catch
            {
                return false;
            }
        }

        public void SetError(string errorText, ErrorType errorType = ErrorType.Default)
        {
            dxErrorProvider1.SetError(txt01, errorText, errorType);
        }

        public void SetFocus()
        {
            if (this.txt01.Text.Length < 1)
            {
                txt01.Focus();
            }
            else if (this.txt02.Text.Length < 1)
            {
                txt02.Focus();
            }
            else
            {
                txt03.Focus();
            }
        }

        public string GetFullTextFormat(char customChar = '-')
        {
            char spilitChar;
            // Nếu là custom char
            if (customChar.Equals(this.SplitChar) == false)
            {
                spilitChar = customChar;
            }
            else // Nếu không mặc định lấy theo property
            {
                spilitChar = this.SplitChar;
            }

            StringBuilder sb = new StringBuilder();
            sb.Append(this.Text01);
            sb.Append(spilitChar);
            sb.Append(this.Text02);
            sb.Append(spilitChar);
            sb.Append(this.Text03);
            return sb.ToString();
        }

        #endregion
        /* --------------------------------------------------------------------------- */

        /* --------------------------- Event handlers--------------------------------- */
        #region "Event handlers"
        
        /// <summary>
        /// Handles the Load event of the MaBenhNhan control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.EventArgs"/> instance containing the event data.</param>
        private void SoKhamBenh_Load(object sender, EventArgs e)
        {
        }

        #region "TextEdit Ô 1"

        private void txt01_TextChanged(object sender, EventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Next control
            if (txtControl.Text.Length == txtControl.Properties.MaxLength)
            {
                txt02.Focus();
            }
        }

        private void txt01_KeyDown(object sender, KeyEventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Previous control
            if (txtControl.SelectionStart == 0
                && e.KeyCode == Keys.Left)
            {
                return;
            }

            if (txtControl.Text.Length == 0
                && e.KeyCode == Keys.Back)
            {
                return;
            }

            // Next control
            if (txtControl.SelectionStart == txtControl.Text.Length
                && e.KeyCode == Keys.Right)
            {
                txt02.Focus();
            }
        }

        #endregion

        #region "TextEdit Ô 2"

        private void txt02_TextChanged(object sender, EventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Next control
            if (txtControl.Text.Length == txtControl.Properties.MaxLength)
            {
                txt03.Focus();
            }
        }

        private void txt02_KeyDown(object sender, KeyEventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Previous control
            if (txtControl.SelectionStart == 0
                && e.KeyCode == Keys.Left)
            {
                txt01.Focus();
                return;
            }

            if (txtControl.Text.Length == 0
                && e.KeyCode == Keys.Back)
            {
                txt01.Focus();
                return;
            }

            // Next control
            if (txtControl.SelectionStart == txtControl.Text.Length
                && e.KeyCode == Keys.Right)
            {
                txt03.Focus();
            }
        }

        #endregion

        #region "TextEdit Ô 3"

        private void txt03_TextChanged(object sender, EventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;
            // Pad left bằng số 0
            //txtControl.Text = txtControl.Text.PadLeft(txtControl.Properties.MaxLength, '0');

            // Next control
            if (txtControl.Text.Length == txtControl.Properties.MaxLength)
            {
            }
        }

        private void txt03_KeyDown(object sender, KeyEventArgs e)
        {
            TextEdit txtControl = sender as TextEdit;

            // Previous control
            if (txtControl.SelectionStart == 0
                && e.KeyCode == Keys.Left)
            {
                txt02.Focus();
                return;
            }

            if (txtControl.Text.Length == 0
                && e.KeyCode == Keys.Back)
            {
                txt02.Focus();
                return;
            }

            // Next control
            if (txtControl.SelectionStart == txtControl.Text.Length
                && e.KeyCode == Keys.Right)
            {
            }
        }

        #endregion

//        System.Windows.Forms.Clipboard.SetDataObject(txtCopy.Text, true);
//Paste the text from clipboard to txtPaste

//IDataObject clipData = Clipboard.GetDataObject();
//if (clipData.GetDataPresent(DataFormats.Text))
//{
//txtPaste.Text = clipData.GetData(DataFormats.Text).ToString();
//}
//else
//{
//txtPaste.Text = "Could not retrieve data from the clipboard.";
//}
        #endregion
        /* --------------------------------------------------------------------------- */

        /* ------------------------------ Sub classes--------------------------------- */
        #region "Sub class"

        #endregion
        /* --------------------------------------------------------------------------- */

        /* --------------------------------- Test ------------------------------------ */
        #region "Test"
        
        // Method dùng cho việc test View
        private void Test()
        {
            // TODO: Test here
        }

        #endregion

        private void PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            if (e.KeyCode == Keys.Enter
                || e.KeyCode == Keys.Tab)
            {
                TextEdit txt = sender as TextEdit;
                // Pad left bằng số 0
                txt03.EditValue = txt03.Text.PadLeft(txt03.Properties.MaxLength, '0');

                // Nếu readonly thì return
                if (txt.Properties.ReadOnly == true)
                {
                    return;
                }

                // Không được rỗng
                if (String.IsNullOrEmpty(this.FullText))
                {
                    return;
                }

                // Kiểm tra hợp lệ
                bool success = this.IsValid();
                if (success == false)
                {
                    return;
                }

                // Raise event
                if (MaBenhNhanValidated != null)
                {
                    MaBenhNhanValidated(this, new EventArgs());
                }

                // Raise event
                if (Text03_PreviewKeyDown != null)
                {
                    Text03_PreviewKeyDown(this, e);
                }
            }
        }



        private void Clear_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            if (e.KeyData == (Keys.Control | Keys.Delete))
            {
                this.FullText = null;
                this.SetFocus();
            }
        }

        private void txt01_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            if (Text01_PreviewKeyDown != null)
            {
                Text01_PreviewKeyDown(sender, e);
            }
        }


        /* --------------------------------------------------------------------------- */
    }
}
