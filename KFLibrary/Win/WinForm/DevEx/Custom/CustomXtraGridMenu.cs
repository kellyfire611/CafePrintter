//<auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DevExpress.Utils;
using DevExpress.Utils.Menu;
using DevExpress.XtraGrid.Menu;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using KFLibrary.Offices;
using KFLibrary.Win.WinForm.DevEx.Utilities;
using DevExpress.XtraGrid.Views.BandedGrid;
using DevExpress.XtraGrid.Views.BandedGrid.ViewInfo;
using DevExpress.XtraGrid.Views.Grid.ViewInfo;
using DevExpress.XtraEditors;
using System.Windows.Forms;
using System.Drawing;
using DevExpress.XtraGrid;

namespace KFLibrary.Win.WinForm.DevEx.Custom
{
    public class GridViewColumnButtonMenu : GridViewMenu
    {
        public GridViewColumnButtonMenu(DevExpress.XtraGrid.Views.Grid.GridView view) : base(view) { }
        protected override void CreateItems()
        {
            Items.Clear();
            // Menu xuất Excel
            Items.Add(CreateMenuItem("Xuất Excel", GridMenuImages.Column.Images[3],
              View, true));
        }

        protected override void OnMenuItemClick(object sender, EventArgs e)
        {
            if (RaiseClickEvent(sender, null)) 
                return;
            DXMenuItem item = sender as DXMenuItem;

            if (item.Tag == null) 
                return;

            if (item.Tag is GridColumn)
            {
                GridColumn column = item.Tag as GridColumn;
                column.VisibleIndex = column.VisibleIndex >= 0 ? -1 : View.VisibleColumns.Count;
            }
            else if (item.Tag.ToString() == "Customization")
            {
                View.ShowCustomization();
            }
            if (item.Tag is GridView)
            {
                var bandedGridView = item.Tag as BandedGridView;
                if (bandedGridView != null)
                {
                    this.ExportExcel(bandedGridView);
                }
                else
                {
                    var view = item.Tag as GridView;
                    if (view != null)
                    {
                        this.ExportExcel(view);
                    }
                }
            }
        }

        private void ExportExcel(BandedGridView view)
        {
            string caption = "Đang xuất Excel....";
            WaitDialogForm waitDialog = new WaitDialogForm(caption, "Xin vui lòng chờ giây lát");
            ExcelManager excel = null;
            try
            {
                // Khởi tạo Excel
                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 0));
                string templateFilePath = String.Empty;
                excel = new ExcelManager();
                var encode = ExcelManager.EncodeType.Unicode;
                switch (encode)
                {
                    case ExcelManager.EncodeType.Unicode:
                        excel.SelectRange().SetFontFamily("Times New Roman");
                        break;
                    case ExcelManager.EncodeType.VNI:
                        break;
                    case ExcelManager.EncodeType.TCVN3:
                        excel.SelectRange()
                            .SetFontFamily(".VnTime");
                        break;
                    default:
                        break;
                }

                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 10));
                excel.DisplayAlerts = false;
                excel.ScreenUpdating = false;
                excel.ShowExcelProgram = true;
                excel.Page();
                excel.StandardFontSize = 10;
                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 25));

                // Print band header
                //view.ExpandAllGroups();
                excel.BandedGridHeader2Excel(view, true, 1, 1, "headerRangeName");
                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 50));

                // Print data
                int startRow = 1;
                int startCol = 1;
                startRow = excel.WorkingRange.Row + excel.WorkingRange.Rows.Count;
                startCol = 1;

                bool useSummaryGroup = false;
                bool useSummaryFooter = false;
                excel.GridData2Excel(view, startRow, startCol,
                    useSummaryGroup, useSummaryFooter, "dataRangeName", true);
                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 75));

                excel.SelectRange(excel.WorkingRange.Row + excel.WorkingRange.Rows.Count, excel.WorkingRange.Column,
                    excel.WorkingRange.Row + excel.WorkingRange.Rows.Count, excel.WorkingRange.Column + excel.WorkingRange.Columns.Count - 1);

                excel.SelectRange("dataRangeName").AutoFitColumn();
                excel.ScreenUpdating = true;
                excel.ShowExcelProgram = true;
                excel.CalculationType = Microsoft.Office.Interop.Excel.XlCalculation.xlCalculationAutomatic;
            }
            catch (Exception ex)
            {
                waitDialog.Close();
                XtraMessageBox.Show("Có lỗi xảy ra khi xuất Excel.");
                XtraMessageBox.Show(ex.Message);
                
                if (excel != null)
                {
                    excel.ScreenUpdating = true;
                    excel.CalculationType = Microsoft.Office.Interop.Excel.XlCalculation.xlCalculationAutomatic;
                    excel.CleanUp();
                }
            }
            finally
            {
                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 100));
                waitDialog.Close();
            }
        }

        private void ExportExcel(GridView view)
        {
            string caption = "Đang xuất Excel....";
            WaitDialogForm waitDialog = new WaitDialogForm(caption, "Xin vui lòng chờ giây lát");
            ExcelManager excel = null;
            try
            {
                // Khởi tạo Excel
                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 0));
                string templateFilePath = String.Empty;
                excel = new ExcelManager();
                var encode = ExcelManager.EncodeType.Unicode;
                switch (encode)
                {
                    case ExcelManager.EncodeType.Unicode:
                        excel.SelectRange().SetFontFamily("Times New Roman");
                        break;
                    case ExcelManager.EncodeType.VNI:
                        break;
                    case ExcelManager.EncodeType.TCVN3:
                        excel.SelectRange()
                            .SetFontFamily(".VnTime");
                        break;
                    default:
                        break;
                }

                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 10));
                excel.DisplayAlerts = false;
                excel.ScreenUpdating = false;
                excel.ShowExcelProgram = true;
                excel.Page();
                excel.StandardFontSize = 10;
                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 25));

                // Print band header
                //view.ExpandAllGroups();
                excel.GridHeader2Excel(view, 1, 1, "headerRangeName", false);
                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 50));

                // Print data
                int startRow = 1;
                int startCol = 1;
                startRow = excel.WorkingRange.Row + excel.WorkingRange.Rows.Count;
                startCol = 1;

                bool useSummaryGroup = false;
                bool useSummaryFooter = false;
                excel.GridData2Excel(view, startRow, startCol,
                    useSummaryGroup, useSummaryFooter, "dataRangeName", true);
                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 75));

                excel.SelectRange(excel.WorkingRange.Row + excel.WorkingRange.Rows.Count, excel.WorkingRange.Column,
                    excel.WorkingRange.Row + excel.WorkingRange.Rows.Count, excel.WorkingRange.Column + excel.WorkingRange.Columns.Count - 1);

                excel.SelectRange("dataRangeName").AutoFitColumn();
                excel.ScreenUpdating = true;
                excel.ShowExcelProgram = true;
                excel.CalculationType = Microsoft.Office.Interop.Excel.XlCalculation.xlCalculationAutomatic;
            }
            catch (Exception ex)
            {
                waitDialog.Close();
                XtraMessageBox.Show("Có lỗi xảy ra khi xuất Excel.");
                XtraMessageBox.Show(ex.Message);
                if (excel != null)
                {
                    excel.ScreenUpdating = true;
                    excel.CalculationType = Microsoft.Office.Interop.Excel.XlCalculation.xlCalculationAutomatic;
                    excel.CleanUp();
                }
            }
            finally
            {
                waitDialog.SetCaption(String.Format("{0} - {1}%", caption, 100));
                waitDialog.Close();
            }
        }
    }

    public static class XtraGirdMenuHelper
    {
        private static void DoShowMenu(GridView view, GridHitInfo hi)
        {
            DevExpress.XtraGrid.Menu.GridViewMenu menu = null;
            if (hi.HitTest == GridHitTest.ColumnButton)
            {
                menu = new GridViewColumnButtonMenu(view);
                menu.Init(hi);
                menu.Show(hi.HitPoint);
            }
        }

        private static void DoShowMenu(BandedGridView view, BandedGridHitInfo hi)
        {
            DevExpress.XtraGrid.Menu.GridViewMenu menu = null;
            if (hi.HitTest == BandedGridHitTest.BandButton)
            {
                menu = new GridViewColumnButtonMenu(view);
                menu.Init(hi);
                menu.Show(hi.HitPoint);
            }
        }

        public static void CreateCustomXtraGridMenu(Control ctl)
        {
            GridView p_GridView = null;
            if (ctl is GridControl)
            {
                GridControl gc = ctl as GridControl;
                p_GridView = gc.MainView as GridView;
            }
            else
            {
                return;
            }

            // Check if the end-user has right clicked the grid control. 
            p_GridView.MouseDown += (sender, e) =>
            {
                if (e.Button == MouseButtons.Right)
                {
                    if (p_GridView is BandedGridView)
                    {
                        var bandedGridView = p_GridView as BandedGridView;
                        if (bandedGridView != null)
                        {
                            XtraGirdMenuHelper.DoShowMenu(bandedGridView, bandedGridView.CalcHitInfo(new Point(e.X, e.Y)));
                        }
                    }
                    else
                    {
                        XtraGirdMenuHelper.DoShowMenu(p_GridView, p_GridView.CalcHitInfo(new Point(e.X, e.Y)));
                    }
                }
            };
        }
    }
}
