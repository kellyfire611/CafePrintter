//<auto-generated />

using System;
using System.Data;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Xml;

namespace KFLibrary.Utilities
{
    public class TCPClient
    {
        private static TcpClient _server;
        private static NetworkStream _networkStream;
        private static string _textReceive = "";
        public static DataTable dtReceive = new DataTable();
        public static string HostIP = "";
        public static bool ConnectTCPServices = false;

        private static bool Start(string serverIP)
        {
            if (!ConnectTCPServices) return false;

            if (string.IsNullOrEmpty(serverIP))
            {
                HostIP = "172.16.160.129";
            }
            else if (serverIP == ".")
            {
                HostIP = "127.0.0.1";
            }
            else
            {
                HostIP = serverIP;
            }

            if (HostIP == "")
            {
                return false;
            }
            const int port = 5022;

            if (_server == null)
            {
                try
                {
                    dtReceive = new DataTable();
                    dtReceive.Columns.Add("Khoa");
                    dtReceive.Columns.Add("Phong");
                    dtReceive.Columns.Add("TenNguoiDung");
                    dtReceive.Columns.Add("ChucNang");

                    _server = new TcpClient(HostIP, port);
                }
                catch (SocketException)
                {
                    _server = null;
                    _networkStream = null;
                    Console.WriteLine("Unable to connect to server");
                    return false;
                }

                _networkStream = _server.GetStream();

                StateObject state = new StateObject();
                state.workSocket = _server.Client;
                _server.Client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0, (new TCPClient()).OnReceive,
                    state);
            }
            return true;
        }


        ~TCPClient()
        {
            if (_server != null)
            {
                _networkStream.Close();
                _server.Close();
                _server = null;
                _networkStream = null;
            }
        }

        private static void Send(string input, string serverIP)
        {
            try
            {
                if (Start(serverIP))
                {
                    input = StringToHex(input, Encoding.UTF8);

                    _networkStream.Write(Encoding.ASCII.GetBytes(input), 0, input.Length);
                    _networkStream.Flush();
                }
            }
            catch (Exception)
            {
                _server = null;
                _networkStream = null;
            }

        }

        public static void SetLocal(string setKhoa, string setPhong, string setTenNguoiDung, string setChucNang, string clientIP, string serverIP)
        {
            Send("/" + eCommand.SetKhoa + " " + setKhoa, serverIP);
            Send("/" + eCommand.SetPhong + " " + setPhong, serverIP);
            Send("/" + eCommand.SetTenNguoiDung + " " + setTenNguoiDung, serverIP);
            Send("/" + eCommand.SetChucNang + " " + setChucNang, serverIP);
            Send("/" + eCommand.SetClientIP + " " + clientIP, serverIP);

        }

        public static void SendToKhoa(string Khoa, string message, string serverIP)
        {
            Send("/" + eCommand.SendTo + " [" + Khoa + "] " + message, serverIP);
        }

        public static void SendToIP(string cIP, string message, string serverIP)
        {
            Send("/" + eCommand.SendToIP + " [" + cIP + "] " + message, serverIP);
        }

        public static string GetOnLine(string serverIP)
        {
            _textReceive = "";

            Send("/" + eCommand.GetOnline, serverIP);

            DateTime dTimeOut = DateTime.Now;
            while (
                HexToString(_textReceive, Encoding.UTF8).IndexOf("[/GetOnline]", StringComparison.Ordinal) < 0
                && _server != null
                && dTimeOut.AddSeconds(15) > DateTime.Now
                )
            {
            }

            dtReceive.Clear();

            _textReceive = HexToString(_textReceive, Encoding.UTF8).Replace("[/GetOnline]", "");

            foreach (string item in _textReceive.Split(new string[] { "[GetOnline]" }, StringSplitOptions.RemoveEmptyEntries))
            {
                foreach (string sClient in item.Split(new string[] { "[Client]" }, StringSplitOptions.RemoveEmptyEntries))
                {
                    DataRow dr = dtReceive.NewRow();

                    string[] lines = Regex.Split(sClient, "\t");

                    for (int i = 0; i < lines.Length; i++)
                    {
                        dr[i] = lines[i];
                    }
                    if (!string.IsNullOrWhiteSpace(string.Empty + dr[0]))
                        dtReceive.Rows.Add(dr);
                }

            }

            return _textReceive;


        }

        public void OnReceive(IAsyncResult ar)
        {
            String content;

            // Retrieve the state object and the handler socket
            // from the asynchronous state object.
            StateObject state = (StateObject)ar.AsyncState;
            Socket handler = state.workSocket;
            int bytesRead;

            if (handler.Connected)
            {
                // Read data from the client socket. 
                try
                {
                    bytesRead = handler.EndReceive(ar);
                    if (bytesRead > 0)
                    {
                        // There  might be more data, so store the data received so far.
                        state.sb.Remove(0, state.sb.Length);
                        state.sb.Append(Encoding.ASCII.GetString(state.buffer, 0, bytesRead));

                        content = state.sb.ToString();
                        _textReceive += content;

                        handler.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0,
                            new AsyncCallback(OnReceive), state);

                        string serverMessage = HexToString(_textReceive, Encoding.UTF8);
                        if (serverMessage.IndexOf("[ServerMessage]", StringComparison.Ordinal) >= 0 &&
                            serverMessage.IndexOf("[/ServerMessage]", StringComparison.Ordinal) > 0)
                        {
                            serverMessage = serverMessage.Replace("[ServerMessage]", "").Replace("[/ServerMessage]", "");

                            MessageBox.Show(serverMessage);
                        }

                        if (serverMessage.IndexOf("[ServerMessageIP]", StringComparison.Ordinal) >= 0 &&
                            serverMessage.IndexOf("[/ServerMessageIP]", StringComparison.Ordinal) > 0)
                        {
                            serverMessage = serverMessage.Replace("[ServerMessageIP]", "").Replace("[/ServerMessageIP]", "");

                            // Add vao cửa sổ chat

                        }
                    }
                }

                catch (SocketException socketException)
                {
                    //WSAECONNRESET, the other side closed impolitely
                    if (socketException.ErrorCode == 10054 || ((socketException.ErrorCode != 10004) && (socketException.ErrorCode != 10053)))
                    {
                        handler.Close();
                    }
                }
                catch (Exception exception)
                {
                    //MessageBox.Show(exception.Message + "\n" + exception.StackTrace);

                }
            }
        }

        public static string StringToHex(String input, System.Text.Encoding encoding)
        {
            Byte[] stringBytes = encoding.GetBytes(input);
            StringBuilder sbBytes = new StringBuilder(stringBytes.Length * 2);
            foreach (byte b in stringBytes)
            {
                sbBytes.AppendFormat("{0:X2}", b);
            }
            return sbBytes.ToString();
        }

        /// <summary>
        /// Hàm chuyển từ Hex sang String
        /// </summary>
        /// <param name="hexInput">Dữ liệu Hex cần chuyển sang String</param>
        /// <param name="encoding">Encoding UTF-8</param>
        /// <returns></returns>
        public static string HexToString(String hexInput, System.Text.Encoding encoding)
        {
            int numberChars = hexInput.Length;
            byte[] bytes = new byte[numberChars / 2];
            for (int i = 0; i < numberChars; i += 2)
            {
                bytes[i / 2] = Convert.ToByte(hexInput.Substring(i, 2), 16);
            }
            return encoding.GetString(bytes);
        }

        public static string ReadXML(String URLString, string section, string entry, string Default)
        {
            try
            {
                string xmlStr;
                using (var wc = new WebClient())
                {
                    xmlStr = wc.DownloadString(URLString);
                }

                var xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(xmlStr);
                XmlElement root = xmlDoc.DocumentElement;
                XmlNode entryNode = root.SelectSingleNode(GetSectionsPath(section) + "/" + GetEntryPath(entry));
                return entryNode.InnerText;
            }
            catch (Exception)
            {

                return Default;
            }
        }

        private static string GetSectionsPath(string section)
        {
            return "section[@name=\"" + section + "\"]";
        }

        private static string GetEntryPath(string entry)
        {
            return "entry[@name=\"" + entry + "\"]";
        }

        
    }

    public class StateObject
    {
        // Client  socket.
        public Socket workSocket = null;
        // Size of receive buffer.
        public const int BufferSize = 1024;
        // Receive buffer.
        public byte[] buffer = new byte[BufferSize];
        // Received data string.
        public StringBuilder sb = new StringBuilder();
    }

    enum eCommand
    {
        SendAll,
        GetOnline,
        SendTo,

        SetKhoa,
        SetPhong,
        SetTenNguoiDung,
        SetChucNang,

        None,
        SetClientIP,
        SendToIP
    }
}
