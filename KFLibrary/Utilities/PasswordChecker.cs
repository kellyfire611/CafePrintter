//<auto-generated />

#region "Author"
/****************************************************************************************
 * Solution     : CUSC His Framework
 * Project code : APP1105
 * Author       : Dương Nguyễn Phú Cường
 * Company      : Cusc Software
 * Version      : 1.0.0.1
 * Created date : 29/03/2013
 ***************************************************************************************/
#endregion

using System;
using System.Text.RegularExpressions;

namespace KFLibrary.Utilities
{
    class PasswordChecker
    {
        public enum PasswordStrength
        {
            Unacceptable,
            Weak,
            Ok,
            Strong,
            Secure
        }

        public int GeneratePasswordScore(string p_Password)
        {
            if (p_Password == null) return 0;
            int lengthScore = GetLengthScore(p_Password);
            int lowerScore = GetLowerScore(p_Password);
            int upperScore = GetUpperScore(p_Password);
            int digitScore = GetDigitScore(p_Password);
            int symbolScore = GetSymbolScore(p_Password);
            return lengthScore + lowerScore + upperScore + digitScore + symbolScore;
        }

        private int GetLengthScore(string p_Password)
        {
            return Math.Min(10, p_Password.Length) * 6;
        }

        private int GetLowerScore(string p_Password)
        {
            int rawScore = p_Password.Length - Regex.Replace(p_Password, "[a-z]", "").Length;
            return Math.Min(2, rawScore) * 5;
        }

        private int GetUpperScore(string password)
        {
            int rawScore = password.Length - Regex.Replace(password, "[A-Z]", "").Length;
            return Math.Min(2, rawScore) * 5;
        }

        private int GetDigitScore(string password)
        {
            int rawScore = password.Length - Regex.Replace(password, "[0-9]", "").Length;
            return Math.Min(2, rawScore) * 5;
        }

        private int GetSymbolScore(string password)
        {
            int rawScore = Regex.Replace(password, "[a-zA-Z0-9]", "").Length;
            return Math.Min(2, rawScore) * 5;
        }

        public PasswordStrength GetPasswordStrength(string password)
        {
            int score = GeneratePasswordScore(password);

            if (score < 50)
                return PasswordStrength.Unacceptable;
            else if (score < 60)
                return PasswordStrength.Weak;
            else if (score < 80)
                return PasswordStrength.Ok;
            else if (score < 100)
                return PasswordStrength.Strong;
            else
                return PasswordStrength.Secure;
        }
    }
}
