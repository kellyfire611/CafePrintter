//<auto-generated />

#region "Author"
/****************************************************************************************
 * Solution     : CUSC His Framework
 * Project code : APP1105
 * Author       : Dương Nguyễn Phú Cường
 * Company      : Cusc Software
 * Version      : 1.0.0.1
 * Created date : 29/03/2013
 ***************************************************************************************/
#endregion

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace KFLibrary.Templates
{
    public class StringTemplate
    {
         /* -------------------------------- Enums -----------------------------------*/
        #region "Enums"
        /*
         * Phân biệt message trên từng view
         * Các câu message chung
         */
        public enum MessageType
        {
            System,
            HelpInfo
        }
        #endregion
        /* --------------------------------------------------------------------------*/

        /* ------------------------------- Variables --------------------------------*/
        #region "Variables"
        //private static StringTemplate _instance;        // Instance
        //private static object _syncLock = new object(); // Lock synchronization object
        // Dictionary store tokens
        private Dictionary<string, string> _tokens = 
            new Dictionary<string,string>(StringComparer.OrdinalIgnoreCase); 
        // Regex to match tokens - ${APP_NAME}
        private Regex _rexToken = null;
        private string _pattern;
        private bool _isDebug = true;
        #endregion
        /* --------------------------------------------------------------------------*/

        /* ------------------------------ Properties --------------------------------*/
        #region "Properties"
        ///// <summary>
        ///// Get StringTemplate instance
        ///// </summary>
        //public static StringTemplate Instance
        //{
        //    get
        //    {
        //        return GetInstanse();
        //    }
        //}
        /// <summary>
        /// Get dictionary that's store Tokens
        /// </summary>
        public Dictionary<string, string> Tokens
        {
            get { return _tokens; }
        }

        public string Pattern
        {
            get
            {
                return _pattern;
            }
            set
            {
                _pattern = value;
                _rexToken = new Regex(_pattern, RegexOptions.Compiled);
            }
        }
        #endregion
        /* --------------------------------------------------------------------------*/

        /* -------------------------------- Methods ---------------------------------*/
        #region "Methods"
        public StringTemplate()
        {
            //// Init token from XML
            //var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(
            //    _embededMessagePath);
            //if (stream != null)
            //{
            //    this.InitializeToken(stream);
            //}

            //// Init token from code
            ////Version ver = AppUtilities.GetCurrentVersion(true);
            ////this.Tokens.Add("APP_VERSION", ver.ToString());

            this.Tokens.Add("APP_NAME", "Manager");
            this.Tokens.Add("FOUNDATION", "Kellyfire");

            // Init
            this.Pattern = @"\${([^}]+)}";
        }

        //public static StringTemplate GetInstanse()
        //{
        //    // Support multithreaded applications through
        //    // 'Double checked locking' pattern which (once
        //    // the instance exists) avoids locking each
        //    // time the method is invoked
        //    if (_instance == null)
        //    {
        //        lock (_syncLock)
        //        {
        //            if (_instance == null)
        //            {
        //                _instance = new StringTemplate();
        //            }
        //        }
        //    }
        //    return _instance;
        //}

        //public void InitializeToken(string xmlFilePath)
        //{
        //    XElement doc = XElement.Load(xmlFilePath);
        //    var tokens = from p in doc.Descendants()
        //                 where p.Name == "Tokens"
        //                 select p;
        //    foreach (var token in tokens.Descendants())
        //    {
        //        this.Tokens.Add(token.Attribute("name").Value, token.Value);
        //    }
        //}

        //public void InitializeToken(Stream xmlFileStream)
        //{
        //    XElement doc = XElement.Load(xmlFileStream);
        //    var tokens = from p in doc.Descendants()
        //                 where p.Name == "Tokens"
        //                 select p;
        //    foreach (var token in tokens.Descendants())
        //    {
        //        this.Tokens.Add(token.Attribute("name").Value, token.Value);
        //    }
        //}

        public string ReplaceTokens(string template)
        {
            if (String.IsNullOrEmpty(template))
            {
                return null;
            }

            return (_rexToken.Replace(template, delegate(Match m)
            {
                string key = m.Groups[1].Value;
                string rep = this.Tokens.ContainsKey(key) ? this.Tokens[key] : m.Value;
                if (_isDebug)
                {
                    return String.Format("[{0}]: {1}", key, rep);
                }
                return (rep);
            }));
        }
        #endregion
        /* --------------------------------------------------------------------------*/

        /* --------------------------- Event handlers--------------------------------*/
        #region "Event handlers"

        #endregion
        /* --------------------------------------------------------------------------*/

        /* ------------------------------ Sub classes -------------------------------*/
        #region "Sub classes"

        #endregion
        /* --------------------------------------------------------------------------*/

        /* --------------------------------- Test -----------------------------------*/
        #region "Tests"
        // Method test code
        private void Test()
        {
            // Todo: test code here
        }
        #endregion
        /* --------------------------------------------------------------------------*/
    }
}
