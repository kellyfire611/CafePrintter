//<auto-generated />

#region "Author"
/****************************************************************************************
 * Solution     : CUSC His Framework
 * Project code : APP1105
 * Author       : Dương Nguyễn Phú Cường
 * Company      : Cusc Software
 * Version      : 1.0.0.1
 * Created date : 29/03/2013
 ***************************************************************************************/
#endregion

using System;
using System.Diagnostics;

namespace KFLibrary.Exceptions
{
    public static class ExceptionMonter
    {
        public static bool EatTheException(Action action, string actionDescription)
        {
            Exception ex;
            return EatTheException(action, actionDescription, out ex);
        }

        public static bool EatTheException(Action action, string actionDescription, out Exception ex)
        {
            bool success;
            EatTheException(() =>
            {
                action();
                return (object)null;
            }, actionDescription, out success, out ex);
            return success;
        }

        public static T EatTheException<T>(Func<T> action, string actionDescription)
        {
            Exception ex;
            bool success;
            return EatTheException(action, actionDescription, out success, out ex);
        }

        public static T EatTheException<T>(Func<T> action, string actionDescription, out bool success, out Exception ex)
        {
            ex = null;
            try
            {
                T result = action();
                success = true;
                return result;
            }
            catch (Exception exception)
            {
                ex = exception;
                Trace.WriteLine("Error occured while " + actionDescription + ": " + ex.ToString());
            }
            success = false;
            return default(T);
        }
    }

    public static class Extensions
    {
        ///// <summary>
        ///// Renders an exception with messages and stack traces
        ///// </summary>
        ///// <param name="ex">The exception to render</param>    
        ///// <param name="noTrace">Whether trace information should be omitted</param>
        ///// <returns>A string containing messages and stack traces</returns>
        //public static string Render(this Exception ex, bool noTrace = false)
        //{
        //    var s = new StringBuilder("\n");
        //    int i = 0;
        //    do
        //    {
        //        s.AppendFormat("{0:#\\. inner E;;E}xception ({1}):\n   {2}\n",
        //            i++,
        //            ex.GetType().Name,
        //            ex.Message.Replace("\n", "\n   "));
        //        if (ex is UpdateException)
        //        {
        //            foreach (var stateEntry in ((UpdateException)ex).StateEntries)
        //            {
        //                var entity = stateEntry.Entity ?? new object();
        //                s.AppendFormat("     {0} {1}: {2}\n", stateEntry.State, entity.GetType().Name, entity);
        //                var values =
        //                    stateEntry.State == EntityState.Deleted
        //                        ? stateEntry.OriginalValues
        //                        : stateEntry.CurrentValues;
        //                for (int j = 0; j < values.FieldCount; j++)
        //                {
        //                    var currentValue = values[j];
        //                    var originalValue =
        //                        stateEntry.State == EntityState.Added
        //                            ? currentValue
        //                            : stateEntry.OriginalValues[j];
        //                    s.AppendFormat(originalValue.Equals(currentValue) ? "      {0}: <{1}>\n" : "      {0}: <{1}>→<{2}\n",
        //                                   values.GetName(j), originalValue, currentValue);
        //                }
        //            }
        //        }
        //        s.AppendFormat(noTrace ? "\n" : "Trace:\n{0}\n", ex.StackTrace);
        //        ex = ex.InnerException;
        //    }
        //    while (ex != null);
        //    return s.ToString();
        //}
    }
}
