<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KFLibrary</name>
    </assembly>
    <members>
        <member name="M:KFLibrary.DataTypes.Comparer.ComparerEx.IsInPeriod(System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Hàm kiểm tra khoảng thời gian từ ngày - đến ngày với ngày bắt đầu và kết thúc trong sổ kế toán
            </summary>
            <param name="ngayBatDau">Ngày bắt đầu sổ kế toán</param>
            <param name="ngayKetThuc">Ngày kêt thúc sổ kế toán</param>
            <param name="startDate">Từ ngày</param>
            <param name="endDate">Đến ngày</param>
            <returns></returns>
            Author: DUONG NGUYEN PHU CUONG
        </member>
        <member name="T:KFLibrary.DataTypes.Converter`1">
            <summary>
            	An internal implementation of the IConverter&lt;T&gt; interface
            </summary>
            <typeparam name = "T"></typeparam>
        </member>
        <member name="M:KFLibrary.DataTypes.Converter`1.#ctor(`0)">
            <summary>
            	Initializes a new instance of the <see cref = "T:KFLibrary.DataTypes.Converter`1" /> class.
            </summary>
            <param name = "value">The value.</param>
        </member>
        <member name="P:KFLibrary.DataTypes.Converter`1.Value">
            <summary>
            	Gets the internal value to be converted.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:KFLibrary.DataTypes.Extensions.DateTimeExtension">
            <summary>
            	Extension methods for the DateTimeOffset data type.
            </summary>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.DayOfWeekVietnamese(System.DateTime)">
            <summary>
            Chuyển thứ trong tuần thành tiếng việt.
            </summary>
            <param name="date">Ngày cần chuyển.</param>
            <returns>Thứ trong tuần tiếng việt.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.FirstDayOfMonth(System.DateTime)">
            <summary>
            Get ngày đầu tháng
            </summary>
            <param name="value">Ngày</param>
            <returns>Ngày đầu tháng</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.LastDayOfMonth(System.DateTime)">
            <summary>
            Get ngày cuối tháng
            </summary>
            <param name="value">Ngày</param>
            <returns>Ngày cuối tháng</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.FirstDayOfYear(System.DateTime)">
            <summary>
            Get ngày đầu năm
            </summary>
            <param name="value">Ngày</param>
            <returns>Ngày đầu năm</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.LastDayOfYear(System.DateTime)">
            <summary>
            Get ngày cuối năm
            </summary>
            <param name="value">Ngày</param>
            <returns>Ngày cuối năm</returns>
        </member>
        <member name="P:KFLibrary.DataTypes.Extensions.DateTimeExtension.UtcOffset">
            <summary>
            	Return System UTC Offset
            </summary>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.CalculateAge(System.DateTime)">
            <summary>
            	Calculates the age based on today.
            </summary>
            <param name = "dateOfBirth">The date of birth.</param>
            <returns>The calculated age.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.CalculateAge(System.DateTime,System.DateTime)">
            <summary>
            	Calculates the age based on a passed reference date.
            </summary>
            <param name = "dateOfBirth">The date of birth.</param>
            <param name = "referenceDate">The reference date to calculate on.</param>
            <returns>The calculated age.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetCountDaysOfMonth(System.DateTime)">
            <summary>
            	Returns the number of days in the month of the provided date.
            </summary>
            <param name = "date">The date.</param>
            <returns>The number of days.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            	Returns the first day of the month of the provided date.
            </summary>
            <param name = "date">The date.</param>
            <returns>The first day of the month</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetFirstDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            	Returns the first day of the month of the provided date.
            </summary>
            <param name = "date">The date.</param>
            <param name = "dayOfWeek">The desired day of week.</param>
            <returns>The first day of the month</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetLastDayOfMonth(System.DateTime)">
            <summary>
            	Returns the last day of the month of the provided date.
            </summary>
            <param name = "date">The date.</param>
            <returns>The last day of the month.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetLastDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            	Returns the last day of the month of the provided date.
            </summary>
            <param name = "date">The date.</param>
            <param name = "dayOfWeek">The desired day of week.</param>
            <returns>The date time</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.IsToday(System.DateTime)">
            <summary>
            	Indicates whether the date is today.
            </summary>
            <param name = "dt">The date.</param>
            <returns>
            	<c>true</c> if the specified date is today; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Sets the time on the specified DateTime value.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "hours">The hours to be set.</param>
            <param name = "minutes">The minutes to be set.</param>
            <param name = "seconds">The seconds to be set.</param>
            <returns>The DateTime including the new time value</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Sets the time on the specified DateTime value.
            </summary>
            <param name = "date">The base date.</param>
            <param name="hours">The hour</param>
            <param name="minutes">The minute</param>
            <param name="seconds">The second</param>
            <param name="milliseconds">The millisecond</param>
            <returns>The DateTime including the new time value</returns>
            <remarks>Added overload for milliseconds - jtolar</remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.SetTime(System.DateTime,System.TimeSpan)">
            <summary>
            	Sets the time on the specified DateTime value.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "time">The TimeSpan to be applied.</param>
            <returns>
            	The DateTime including the new time value
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.ToDateTimeOffset(System.DateTime)">
            <summary>
            	Converts a DateTime into a DateTimeOffset using the local system time zone.
            </summary>
            <param name = "localDateTime">The local DateTime.</param>
            <returns>The converted DateTimeOffset</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.ToDateTimeOffset(System.DateTime,System.TimeZoneInfo)">
            <summary>
            	Converts a DateTime into a DateTimeOffset using the specified time zone.
            </summary>
            <param name = "localDateTime">The local DateTime.</param>
            <param name = "localTimeZone">The local time zone.</param>
            <returns>The converted DateTimeOffset</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            	Gets the first day of the week using the current culture.
            </summary>
            <param name = "date">The date.</param>
            <returns>The first day of the week</returns>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetFirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            	Gets the first day of the week using the specified culture.
            </summary>
            <param name = "date">The date.</param>
            <param name = "cultureInfo">The culture to determine the first weekday of a week.</param>
            <returns>The first day of the week</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetLastDayOfWeek(System.DateTime)">
            <summary>
            	Gets the last day of the week using the current culture.
            </summary>
            <param name = "date">The date.</param>
            <returns>The first day of the week</returns>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetLastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            	Gets the last day of the week using the specified culture.
            </summary>
            <param name = "date">The date.</param>
            <param name = "cultureInfo">The culture to determine the first weekday of a week.</param>
            <returns>The first day of the week</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetWeeksWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            	Gets the next occurence of the specified weekday within the current week using the current culture.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "weekday">The desired weekday.</param>
            <returns>The calculated date.</returns>
            <example>
            	<code>
            		var thisWeeksMonday = DateTime.Now.GetWeekday(DayOfWeek.Monday);
            	</code>
            </example>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetWeeksWeekday(System.DateTime,System.DayOfWeek,System.Globalization.CultureInfo)">
            <summary>
            	Gets the next occurence of the specified weekday within the current week using the specified culture.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "weekday">The desired weekday.</param>
            <param name = "cultureInfo">The culture to determine the first weekday of a week.</param>
            <returns>The calculated date.</returns>
            <example>
            	<code>
            		var thisWeeksMonday = DateTime.Now.GetWeekday(DayOfWeek.Monday);
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetNextWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            	Gets the next occurence of the specified weekday.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "weekday">The desired weekday.</param>
            <returns>The calculated date.</returns>
            <example>
            	<code>
            		var lastMonday = DateTime.Now.GetNextWeekday(DayOfWeek.Monday);
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetPreviousWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            	Gets the previous occurence of the specified weekday.
            </summary>
            <param name = "date">The base date.</param>
            <param name = "weekday">The desired weekday.</param>
            <returns>The calculated date.</returns>
            <example>
            	<code>
            		var lastMonday = DateTime.Now.GetPreviousWeekday(DayOfWeek.Monday);
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.IsDateEqual(System.DateTime,System.DateTime)">
            <summary>
            	Determines whether the date only part of twi DateTime values are equal.
            </summary>
            <param name = "date">The date.</param>
            <param name = "dateToCompare">The date to compare with.</param>
            <returns>
            	<c>true</c> if both date values are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.IsTimeEqual(System.DateTime,System.DateTime)">
            <summary>
            	Determines whether the time only part of two DateTime values are equal.
            </summary>
            <param name = "time">The time.</param>
            <param name = "timeToCompare">The time to compare.</param>
            <returns>
            	<c>true</c> if both time values are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetMillisecondsSince1970(System.DateTime)">
            <summary>
            	Get milliseconds of UNIX area. This is the milliseconds since 1/1/1970
            </summary>
            <param name = "datetime">Up to which time.</param>
            <returns>number of milliseconds.</returns>
            <remarks>
            	Contributed by blaumeister, http://www.codeplex.com/site/users/view/blaumeiser
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.ToUnixEpoch(System.DateTime)">
            <summary>
            Get milliseconds of UNIX area. This is the milliseconds since 1/1/1970
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
            <remarks>This is the same as GetMillisecondsSince1970 but more descriptive</remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.IsWeekend(System.DateTime)">
            <summary>
            	Indicates whether the specified date is a weekend (Saturday or Sunday).
            </summary>
            <param name = "date">The date.</param>
            <returns>
            	<c>true</c> if the specified date is a weekend; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            	Adds the specified amount of weeks (=7 days gregorian calendar) to the passed date value.
            </summary>
            <param name = "date">The origin date.</param>
            <param name = "value">The amount of weeks to be added.</param>
            <returns>The enw date value</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetDays(System.Int32)">
            <summary>
            	Get the number of days within that year.
            </summary>
            <param name = "year">The year.</param>
            <returns>the number of days within that year</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
                 Modified by JTolar to implement Culture Settings
             </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetDays(System.Int32,System.Globalization.CultureInfo)">
            <summary>
            	Get the number of days within that year. Uses the culture specified.
            </summary>
            <param name = "year">The year.</param>
            <param name="culture">Specific culture</param>
            <returns>the number of days within that year</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
                 Modified by JTolar to implement Culture Settings
             </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetDays(System.DateTime)">
            <summary>
            	Get the number of days within that date year. Allows user to specify culture.
            </summary>
            <param name = "date">The date.</param>
            <param name="culture">Specific culture</param>
            <returns>the number of days within that year</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
                 Modified by JTolar to implement Culture Settings 
             </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetDays(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            	Get the number of days within that date year. Allows user to specify culture
            </summary>
            <param name = "date">The date.</param>
            <param name="culture">Specific culture</param>
            <returns>the number of days within that year</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
                 Modified by JTolar to implement Culture Settings 
             </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetDays(System.DateTime,System.DateTime)">
            <summary>
            	Get the number of days between two dates.
            </summary>
            <param name = "fromDate">The origin year.</param>
            <param name = "toDate">To year</param>
            <returns>The number of days between the two years</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetPeriodOfDay(System.DateTime)">
            <summary>
            	Return a period "Morning", "Afternoon", or "Evening"
            </summary>
            <param name = "date">The date.</param>
            <returns>The period "morning", "afternoon", or "evening"</returns>
             <remarks>
             	Contributed by Michael T, http://about.me/MichaelTran
             </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetWeekOfYear(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            Gets the week number for a provided date time value based on a specific culture.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="culture">Specific culture</param>
            <returns>The week number</returns>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.GetWeekOfYear(System.DateTime)">
            <summary>
            Gets the week number for a provided date time value based on the current culture settings. 
            Uses DefaultCulture from ExtensionMethodSetting
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>The week number</returns>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.IsEaster(System.DateTime)">
            <summary>
                Indicates whether the specified date is Easter in the Christian calendar.
            </summary>
            <param name="date">Instance value.</param>
            <returns>True if the instance value is a valid Easter Date.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.IsBefore(System.DateTime,System.DateTime)">
            <summary>
                Indicates whether the source DateTime is before the supplied DateTime.
            </summary>
            <param name="source">The source DateTime.</param>
            <param name="other">The compared DateTime.</param>
            <returns>True if the source is before the other DateTime, False otherwise</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.IsAfter(System.DateTime,System.DateTime)">
            <summary>
                Indicates whether the source DateTime is before the supplied DateTime.
            </summary>
            <param name="source">The source DateTime.</param>
            <param name="other">The compared DateTime.</param>
            <returns>True if the source is before the other DateTime, False otherwise</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.Tomorrow(System.DateTime)">
            <summary>
            Gets a DateTime representing Next Day
            </summary>
            <param name="date">The current day</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.Yesterday(System.DateTime)">
            <summary>
            Gets a DateTime representing Previous Day
            </summary>
            <param name="date">The current day</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.ToFriendlyDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            The ToFriendlyString() method represents dates in a user friendly way. 
            For example, when displaying a news article on a webpage, you might want 
            articles that were published one day ago to have their publish dates 
            represented as "yesterday at 12:30 PM". Or if the article was publish today, 
            show the date as "Today, 3:33 PM".
            </summary>
            <param name="date">The date.</param>
            <param name="culture">Specific Culture</param>
            <returns>string</returns>
            <remarks>
                modified by jtolar to implement culture settings
            </remarks>/// <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.ToFriendlyDateString(System.DateTime)">
            <summary>
             The ToFriendlyString() method represents dates in a user friendly way. 
             For example, when displaying a news article on a webpage, you might want 
             articles that were published one day ago to have their publish dates 
             represented as "yesterday at 12:30 PM". Or if the article was publish today, 
             show the date as "Today, 3:33 PM". Uses DefaultCulture from ExtensionMethodSetting.
             </summary>
             <param name="date">The date.</param>
             <returns>string</returns>
             <remarks>
                 modified by jtolar to implement culture settings
             </remarks>/// <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.EndOfDay(System.DateTime)">
            <summary>
            Returns the date at 23:59.59.999 for the specified DateTime
            </summary>
            <param name="date">The DateTime to be processed</param>
            <returns>The date at 23:50.59.999</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.Noon(System.DateTime)">
            <summary>
            Returns the date at 12:00:00 for the specified DateTime
            </summary>
            <param name="time">The current date</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.Midnight(System.DateTime)">
            <summary>
            Returns the date at 00:00:00 for the specified DateTime
            </summary>
            <param name="time">The current date</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DateTimeExtension.IsWeekDay(System.DateTime)">
            <summary>
            Returns whether the DateTime falls on a weekday
            </summary>
            <param name="date">The date to be processed</param>
            <returns>Whether the specified date occurs on a weekday</returns>
        </member>
        <member name="T:KFLibrary.DataTypes.Extensions.DecimalExtension">
            <summary>
            Contains extension methods for the <see cref="T:System.Decimal"/> class
            </summary>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DecimalExtension.ToMoneyVietnamese(System.Decimal)">
            <summary>
            Hàm chuyển đổi tiền số thành tiền chữ tiếng Việt nam
            </summary>
            <param name="input">Số tiền cần chuyển đổi</param>
            <returns>Chuỗi tiền chữ VN</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DecimalExtension.RoundDecimalPoints(System.Decimal,System.Int32)">
            <summary>
            Rounds the supplied decimal to the specified amount of decimal points
            </summary>
            <param name="val">The decimal to round</param>
            <param name="decimalPoints">The number of decimal points to round the output value to</param>              
            <returns>A rounded decimal</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DecimalExtension.RoundToTwoDecimalPoints(System.Decimal)">
            <summary>
            Rounds the supplied decimal value to two decimal points
            </summary>
            <param name="val">The decimal to round</param>
            <returns>A decimal value rounded to two decimal points</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DecimalExtension.Abs(System.Decimal)">
            <summary>
            Returns the absolute value of a System.Decimal number
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.DecimalExtension.Abs(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.IntegerExtension.ToRomanNumeral(System.Int32)">
            <summary>
            Converts an integer into a roman numeral.
            </summary>
            <param name="number">
            The number being transformed.
            </param>
            <returns>
            A string representation of the number's corresponding roman numeral.
            </returns>
        </member>
        <member name="T:KFLibrary.DataTypes.Extensions.ObjectExtension">
            <summary>
            	Extension methods for the root data type object
            </summary>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.EqualsAny``1(``0,``0[])">
            <summary>
            	Determines whether the object is equal to any of the provided values.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "obj">The object to be compared.</param>
            <param name = "values">The values to compare with the object.</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.EqualsNone``1(``0,``0[])">
            <summary>
            	Determines whether the object is equal to none of the provided values.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "obj">The object to be compared.</param>
            <param name = "values">The values to compare with the object.</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ConvertTo``1(System.Object)">
            <summary>
            	Converts an object to the specified target type or returns the default value if
                those 2 types are not convertible.
                <para>
                If the <paramref name="value"/> can't be convert even if the types are 
                convertible with each other, an exception is thrown.</para>
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>The target type</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ConvertToAndIgnoreException``1(System.Object)">
            <summary>
            	Converts an object to the specified target type or returns the default value.
                <para>Any exceptions are ignored. </para>
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>The target type</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ConvertToAndIgnoreException``1(System.Object,``0)">
            <summary>
            	Converts an object to the specified target type or returns the default value.
                <para>Any exceptions are ignored. </para>
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The target type</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ConvertTo``1(System.Object,``0)">
            <summary>
            	Converts an object to the specified target type or returns the default value if
                those 2 types are not convertible.
                <para>
                If the <paramref name="value"/> can't be convert even if the types are 
                convertible with each other, an exception is thrown.</para>
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The target type</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ConvertTo``1(System.Object,``0,System.Boolean)">
            <summary>
            	Converts an object to the specified target type or returns the default value if
                those 2 types are not convertible.
                <para>Any exceptions are optionally ignored (<paramref name="ignoreException"/>).</para>
                <para>
                If the exceptions are not ignored and the <paramref name="value"/> can't be convert even if 
                the types are convertible with each other, an exception is thrown.</para>
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <param name = "defaultValue">The default value.</param>
            <param name = "ignoreException">if set to <c>true</c> ignore any exception.</param>
            <returns>The target type</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.CanConvertTo``1(System.Object)">
            <summary>
            	Determines whether the value can (in theory) be converted to the specified target type.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>
            	<c>true</c> if this instance can be convert to the specified target type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ConvertTo``1(``0)">
            <summary>
            	Converts the specified value to a different type.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>An universal converter suppliying additional target conversion methods</returns>
            <example>
            	<code>
            		var value = "123";
            		var numeric = value.ConvertTo().ToInt32();
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            	Dynamically invokes a method using reflection
            </summary>
            <param name = "obj">The object to perform on.</param>
            <param name = "methodName">The name of the method.</param>
            <param name = "parameters">The parameters passed to the method.</param>
            <returns>The return value</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            	Dynamically invokes a method using reflection and returns its value in a typed manner
            </summary>
            <typeparam name = "T">The expected return data types</typeparam>
            <param name = "obj">The object to perform on.</param>
            <param name = "methodName">The name of the method.</param>
            <param name = "parameters">The parameters passed to the method.</param>
            <returns>The return value</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.GetPropertyValue(System.Object,System.String)">
            <summary>
            	Dynamically retrieves a property value.
            </summary>
            <param name = "obj">The object to perform on.</param>
            <param name = "propertyName">The Name of the property.</param>
            <returns>The property value.</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            	Dynamically retrieves a property value.
            </summary>
            <typeparam name = "T">The expected return data type</typeparam>
            <param name = "obj">The object to perform on.</param>
            <param name = "propertyName">The Name of the property.</param>
            <returns>The property value.</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            	Dynamically retrieves a property value.
            </summary>
            <typeparam name = "T">The expected return data type</typeparam>
            <param name = "obj">The object to perform on.</param>
            <param name = "propertyName">The Name of the property.</param>
            <param name = "defaultValue">The default value to return.</param>
            <returns>The property value.</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            	Dynamically sets a property value.
            </summary>
            <param name = "obj">The object to perform on.</param>
            <param name = "propertyName">The Name of the property.</param>
            <param name = "value">The value to be set.</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.GetAttribute``1(System.Object)">
            <summary>
            	Gets the first matching attribute defined on the data type.
            </summary>
            <typeparam name = "T">The attribute type tp look for.</typeparam>
            <param name = "obj">The object to look on.</param>
            <returns>The found attribute</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
            	Gets the first matching attribute defined on the data type.
            </summary>
            <typeparam name = "T">The attribute type tp look for.</typeparam>
            <param name = "obj">The object to look on.</param>
            <param name = "includeInherited">if set to <c>true</c> includes inherited attributes.</param>
            <returns>The found attribute</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.GetAttributes``1(System.Object)">
            <summary>
            	Gets all matching attribute defined on the data type.
            </summary>
            <typeparam name = "T">The attribute type tp look for.</typeparam>
            <param name = "obj">The object to look on.</param>
            <returns>The found attributes</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.GetAttributes``1(System.Object,System.Boolean)">
            <summary>
            	Gets all matching attribute defined on the data type.
            </summary>
            <typeparam name = "T">The attribute type tp look for.</typeparam>
            <param name = "obj">The object to look on.</param>
            <param name = "includeInherited">if set to <c>true</c> includes inherited attributes.</param>
            <returns>The found attributes</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.IsOfType``1(System.Object)">
            <summary>
            	Determines whether the object is exactly of the passed generic type.
            </summary>
            <typeparam name = "T">The target type.</typeparam>
            <param name = "obj">The object to check.</param>
            <returns>
            	<c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.IsOfType(System.Object,System.Type)">
            <summary>
            	Determines whether the object is excactly of the passed type
            </summary>
            <param name = "obj">The object to check.</param>
            <param name = "type">The target type.</param>
            <returns>
            	<c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.IsOfTypeOrInherits``1(System.Object)">
            <summary>
            	Determines whether the object is of the passed generic type or inherits from it.
            </summary>
            <typeparam name = "T">The target type.</typeparam>
            <param name = "obj">The object to check.</param>
            <returns>
            	<c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.IsOfTypeOrInherits(System.Object,System.Type)">
            <summary>
            	Determines whether the object is of the passed type or inherits from it.
            </summary>
            <param name = "obj">The object to check.</param>
            <param name = "type">The target type.</param>
            <returns>
            	<c>true</c> if the object is of the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.IsAssignableTo``1(System.Object)">
            <summary>
            	Determines whether the object is assignable to the passed generic type.
            </summary>
            <typeparam name = "T">The target type.</typeparam>
            <param name = "obj">The object to check.</param>
            <returns>
            	<c>true</c> if the object is assignable to the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.IsAssignableTo(System.Object,System.Type)">
            <summary>
            	Determines whether the object is assignable to the passed type.
            </summary>
            <param name = "obj">The object to check.</param>
            <param name = "type">The target type.</param>
            <returns>
            	<c>true</c> if the object is assignable to the specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.GetTypeDefaultValue``1(``0)">
            <summary>
            	Gets the type default value for the underlying data type, in case of reference types: null
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns>The default value</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ToDatabaseValue``1(``0)">
            <summary>
            	Converts the specified value to a database value and returns DBNull.Value if the value equals its default.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.CastTo``1(System.Object)">
            <summary>
            	Cast an object to the given type. Usefull especially for anonymous types.
            </summary>
            <typeparam name = "T">The type to cast to</typeparam>
            <param name = "value">The object to case</param>
            <returns>
            	the casted type or null if casting is not possible.
            </returns>
            <remarks>
            	Contributed by blaumeister, http://www.codeplex.com/site/users/view/blaumeiser
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.IsNull(System.Object)">
            <summary>
            	Returns TRUE, if specified target reference is equals with null reference.
            	Othervise returns FALSE.
            </summary>
            <param name = "target">Target reference. Can be null.</param>
            <remarks>
            	Some types has overloaded '==' and '!=' operators.
            	So the code "null == ((MyClass)null)" can returns <c>false</c>.
            	The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)" method.
            	However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
            
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
            	object someObject = GetSomeObject();
            	if ( someObject.IsNull() ) { /* the someObject is null */ }
            	else { /* the someObject is not null */ }
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.IsNull``1(``0)">
            <summary>
            	Returns TRUE, if specified target reference is equals with null reference.
            	Othervise returns FALSE.
            </summary>
            <typeparam name = "T">Type of target.</typeparam>
            <param name = "target">Target reference. Can be null.</param>
            <remarks>
            	Some types has overloaded '==' and '!=' operators.
            	So the code "null == ((MyClass)null)" can returns <c>false</c>.
            	The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)" method.
            	However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
            
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
            	MyClass someObject = GetSomeObject();
            	if ( someObject.IsNull() ) { /* the someObject is null */ }
            	else { /* the someObject is not null */ }
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.IsNotNull(System.Object)">
            <summary>
            	Returns TRUE, if specified target reference is equals with null reference.
            	Othervise returns FALSE.
            </summary>
            <param name = "target">Target reference. Can be null.</param>
            <remarks>
            	Some types has overloaded '==' and '!=' operators.
            	So the code "null == ((MyClass)null)" can returns <c>false</c>.
            	The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)" method.
            	However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
            
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
            	object someObject = GetSomeObject();
            	if ( someObject.IsNotNull() ) { /* the someObject is not null */ }
            	else { /* the someObject is null */ }
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.IsNotNull``1(``0)">
            <summary>
            	Returns TRUE, if specified target reference is equals with null reference.
            	Othervise returns FALSE.
            </summary>
            <typeparam name = "T">Type of target.</typeparam>
            <param name = "target">Target reference. Can be null.</param>
            <remarks>
            	Some types has overloaded '==' and '!=' operators.
            	So the code "null == ((MyClass)null)" can returns <c>false</c>.
            	The most correct way how to test for null reference is using "System.Object.ReferenceEquals(object, object)" method.
            	However the notation with ReferenceEquals method is long and uncomfortable - this extension method solve it.
            
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
            <example>
            	MyClass someObject = GetSomeObject();
            	if ( someObject.IsNotNull() ) { /* the someObject is not null */ }
            	else { /* the someObject is null */ }
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.AsString(System.Object)">
            <summary>
            	If target is null, returns null.
            	Othervise returns string representation of target using current culture format provider.
            </summary>
            <param name = "target">Target transforming to string representation. Can be null.</param>
            <example>
            	float? number = null;
            	string text1 = number.AsString();
            
            	number = 15.7892;
            	string text2 = number.AsString();
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.AsString(System.Object,System.IFormatProvider)">
            <summary>
            	If target is null, returns null.
            	Othervise returns string representation of target using specified format provider.
            </summary>
            <param name = "target">Target transforming to string representation. Can be null.</param>
            <param name = "formatProvider">Format provider used to transformation target to string representation.</param>
            <example>
            	CultureInfo czech = new CultureInfo("cs-CZ");
            
            	float? number = null;
            	string text1 = number.AsString( czech );
            
            	number = 15.7892;
            	string text2 = number.AsString( czech );
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.AsInvariantString(System.Object)">
            <summary>
            	If target is null, returns null.
            	Othervise returns string representation of target using invariant format provider.
            </summary>
            <param name = "target">Target transforming to string representation. Can be null.</param>
            <example>
            	float? number = null;
            	string text1 = number.AsInvariantString();
            
            	number = 15.7892;
            	string text2 = number.AsInvariantString();
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.NotNull``1(``0,``0)">
            <summary>
            	If target is null reference, returns notNullValue.
            	Othervise returns target.
            </summary>
            <typeparam name = "T">Type of target.</typeparam>
            <param name = "target">Target which is maybe null. Can be null.</param>
            <param name = "notNullValue">Value used instead of null.</param>
            <example>
            	const int DEFAULT_NUMBER = 123;
            
            	int? number = null;
            	int notNullNumber1 = number.NotNull( DEFAULT_NUMBER ).Value; // returns 123
            
            	number = 57;
            	int notNullNumber2 = number.NotNull( DEFAULT_NUMBER ).Value; // returns 57
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.NotNull``1(``0,System.Func{``0})">
            <summary>
            	If target is null reference, returns result from notNullValueProvider.
            	Othervise returns target.
            </summary>
            <typeparam name = "T">Type of target.</typeparam>
            <param name = "target">Target which is maybe null. Can be null.</param>
            <param name = "notNullValueProvider">Delegate which return value is used instead of null.</param>
            <example>
            	int? number = null;
            	int notNullNumber1 = number.NotNull( ()=> GetRandomNumber(10, 20) ).Value; // returns random number from 10 to 20
            
            	number = 57;
            	int notNullNumber2 = number.NotNull( ()=> GetRandomNumber(10, 20) ).Value; // returns 57
            </example>
            <remarks>
            	Contributed by tencokacistromy, http://www.codeplex.com/site/users/view/tencokacistromy
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ToStringDump(System.Object,System.Reflection.BindingFlags,System.Int32)">
            <summary>
            	get a string representation of a given object.
            </summary>
            <param name = "o">the object to dump</param>
            <param name = "flags">BindingFlags to use for reflection</param>
            <param name = "maxArrayElements">Number of elements to show for IEnumerables</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ToHTMLTable(System.Object,System.Reflection.BindingFlags,System.Int32)">
            <summary>
            	get a html-table representation of a given object.
            </summary>
            <param name = "o">the object to dump</param>
            <param name = "flags">BindingFlags to use for reflection</param>
            <param name = "maxArrayElements">Number of elements to show for IEnumerables</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ToXElement(System.Object,System.Reflection.BindingFlags,System.Int32)">
            <summary>
            	get a XElement representation of a given object.
            </summary>
            <param name = "o">the object to dump</param>
            <param name = "flags">BindingFlags to use for reflection</param>
            <param name = "maxArrayElements">Number of elements to show for IEnumerables</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.DynamicCast(System.Object,System.Type)">
            <summary>
            	Cast an object to the given type. Usefull especially for anonymous types.
            </summary>
            <param name="obj">The object to be cast</param>
            <param name="targetType">The type to cast to</param>
            <returns>
            	the casted type or null if casting is not possible.
            </returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.CastAs``1(System.Object)">
            <summary>
            Cast an object to the given type. Usefull especially for anonymous types.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object to be cast</param>
            <returns>
            the casted type or null if casting is not possible.
            </returns>
            <remarks>
            Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.CountLoopsToNull``1(``0,System.Func{``0,``0})">
            <summary>
            Counts and returns the recursive execution of the passed function until it returns null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item to start peforming on.</param>
            <param name="function">The function to be executed.</param>
            <returns>The number of executions until the function returned null</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.FindTypeByRecursion``2(``0,System.Func{``0,``0})">
            <summary>
            Finds a type instance using a recursive call. The method is useful to find specific parents for example.
            </summary>
            <typeparam name="T">The source type to perform on.</typeparam>
            <typeparam name="K">The targte type to be returned</typeparam>
            <param name="item">The item to start performing on.</param>
            <param name="function">The function to be executed.</param>
            <returns>An target type instance or null.</returns>
            <example><code>
            var tree = ...
            var node = tree.FindNodeByValue("");
            var parentByType = node.FindTypeByRecursion%lt;TheType&gt;(n => n.Parent);
            </code></example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.Cast``1(System.Object)">
            <summary>
            Casts the specified object to the specified type.
            </summary>
            <typeparam name="T">The type to cast to</typeparam>
            <param name="o">The Object being casted</param>
            <returns>returns the object as casted type.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.Cast``1(System.Object,``0)">
            <summary>
            Casts the specified object. If the object is null a return type can be specified.
            </summary>
            <typeparam name="T">The type to cast to.</typeparam>
            <param name="o">The Object being casted</param>
            <param name="defaultValue">The default Type.</param>
            <returns>returns the object as casted type. If null the default type is returned.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.CopyPropertiesFrom(System.Object,System.Object)">
            <summary>
            Copies the readable and writable public property values from the source object to the target
            </summary>
            <remarks>The source and target objects must be of the same type.</remarks>
            <param name="target">The target object</param>
            <param name="source">The source object</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.CopyPropertiesFrom(System.Object,System.Object,System.String)">
            <summary>
            Copies the readable and writable public property values from the source object to the target
            </summary>
            <remarks>The source and target objects must be of the same type.</remarks>
            <param name="target">The target object</param>
            <param name="source">The source object</param>
            <param name="ignoreProperty">A single property name to ignore</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.CopyPropertiesFrom(System.Object,System.Object,System.String[])">
            <summary>
            Copies the readable and writable public property values from the source object to the target
            </summary>
            <remarks>The source and target objects must be of the same type.</remarks>
            <param name="target">The target object</param>
            <param name="source">The source object</param>
            <param name="ignoreProperties">An array of property names to ignore</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ToPropertiesString(System.Object)">
            <summary>
            Returns a string representation of the objects property values
            </summary>
            <param name="source">The object for the string representation</param>
            <returns>A string</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ToPropertiesString(System.Object,System.String)">
            <summary>
            Returns a string representation of the objects property values
            </summary>
            <param name="source">The object for the string representation</param>
            <param name="delimiter">The line terminstor string to use between properties</param>
            <returns>A string</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ToXml(System.Object)">
            <summary>
            Serializes the object into an XML string, using the encoding method specified in
            <see cref="!:ExtensionMethodsSettings.DefaultEncoding"/>
            </summary>
            <remarks>
            The object to be serialized should be decorated with the 
            <see cref="T:System.SerializableAttribute"/>, or implement the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </remarks>
            <param name="source">The object to serialize</param>
            <returns>An XML encoded string representation of the source object</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ToXml(System.Object,System.Text.Encoding)">
            <summary>
            Serializes the object into an XML string
            </summary>
            <remarks>
            The object to be serialized should be decorated with the 
            <see cref="T:System.SerializableAttribute"/>, or implement the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </remarks>
            <param name="source">The object to serialize</param>
            <param name="encoding">The Encoding scheme to use when serializing the data to XML</param>
            <returns>An XML encoded string representation of the source object</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ToXml``1(``0)">
            <summary>
            Serializes the object into an XML string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.ExceptionIfNullOrEmpty(System.Object,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> 
            if the the value is null.
            </summary>
            <param name="value">The value to test.</param>
            <param name="message">The message to display if the value is null.</param>
            <param name="name">The name of the parameter being tested.</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.change_decimal(System.Object)">
            <summary>
            trả về giá trị kiểu decimal
            </summary>
            <param name="pstring">chuổi cần chuyển</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.change_int(System.Object)">
            <summary>
             trả về số cho 1 chuỗi có kiểm tra chuỗi rỗng
            </summary>
            <param name="pstring"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.ObjectExtension.change_bool(System.Object)">
            <summary>
            Thủ tục trả về bool cho 1 chuỗi có kiểm tra chuỗi rỗng
            </summary>
            <param name="pstring"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.Left(System.String,System.Int32)">
            <summary>
            Cắt chuỗi từ bên trái qua.
            </summary>
            <param name="value">Chuỗi cần cắt.</param>
            <param name="length">Độ dài cắt.</param>
            <returns>Chuỗi đã được cắt.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.Right(System.String,System.Int32)">
            <summary>
            Cắt chuỗi từ phải qua.
            </summary>
            <param name="value">Chuỗi cần cắt.</param>
            <param name="length">Độ dài cắt.</param>
            <returns>Chuỗi đã được cắt.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.Mid(System.String,System.Int32)">
            <summary>
            Cắt chuỗi từ vị trí startIndex đến hết chuỗi.
            </summary>
            <param name="value">Chuỗi cần cắt.</param>
            <param name="startIndex">Index bắt đầu cắt chuỗi. Index bắt đầu từ 0.</param>
            <returns>Chuỗi đã được cắt.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.Mid(System.String,System.Int32,System.Int32)">
            <summary>
            Cắt chuỗi từ vị trí startIndex.
            </summary>
            <param name="value">Chuỗi cần cắt.</param>
            <param name="startIndex">Index bắt đầu cắt chuỗi. Index bắt đầu từ 0.</param>
            <param name="length">Độ dài cắt.</param>
            <returns>Chuỗi đã được cắt.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.DecorateWithUnicodeCharacter(System.String,System.String,System.Int32)">
            <summary>
            Trang trí chuỗi bằng Unicode
            </summary>
            <param name="value">Chuỗi cần trang trí.</param>
            <param name="input">Unicode char code. Ví dụ: "00A9" ©, "00AE" ®</param>
            <param name="count">Số lần xuất hiện ký tự unicode.</param>
            <returns>Chuỗi đã được trang trí.</returns>
            <example>
            string str = "string test";
            str.DecorateWithUnicodeCharacter("");
            </example>
            
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.DecorateWithUnicodeCharacter(System.String,System.String,System.String,System.Int32)">
            <summary>
            Trang trí chuỗi bằng Unicode
            </summary>
            <param name="value">Chuỗi cần trang trí.</param>
            <param name="prefix">Prefix unicode char code. Ví dụ: "00A9" ©, "00AE" ®</param>
            <param name="subfix">Subfix unicode char code. Ví dụ: "00A9" ©, "00AE" ®</param>
            <param name="count">Số lần xuất hiện ký tự unicode.</param>
            <returns>Chuỗi đã được trang trí.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToTitleCase(System.String)">
            <summary>
            Viết hoa các ký tự đầu của mỗi từ trong chuỗi.
            </summary>
            <param name="value">Chuỗi nguồn.</param>
            <returns>Chuỗi đã được chuyển thành hoa các ký tự đầu của mỗi từ trong chuỗi.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToTitleCase(System.String,System.Boolean)">
            <summary>
            Viết hoa các ký tự đầu của mỗi từ trong chuỗi.
            </summary>
            <param name="value">Chuỗi nguồn.</param>
            <param name="onlyFirstWord">Chỉ chuyển chữ hoa từ đầu tiên.</param>
            <returns>Chuỗi đã được chuyển thành hoa các ký tự đầu của mỗi từ trong chuỗi.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ChuyenChuoiThanhListNumber(System.String,System.String[])">
            <summary>
            Chuyển chuỗi thành List number
            </summary>
            <param name="strCanChuyen">Chuỗi cần chuyển</param>
            <param name="separators">Dấu phân tách</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IsEmpty(System.String)">
            <summary>
            	Determines whether the specified string is null or empty.
            </summary>
            <param name = "value">The string value to check.</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IsNotEmpty(System.String)">
            <summary>
            	Determines whether the specified string is not null or empty.
            </summary>
            <param name = "value">The string value to check.</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IfEmpty(System.String,System.String)">
            <summary>
            	Checks whether the string is empty and returns a default value in case.
            </summary>
            <param name = "value">The string to check.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>Either the string or the default value.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.FormatWith(System.String,System.Object[])">
            <summary>
            	Formats the value with the parameters using string.Format.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.TrimToMaxLength(System.String,System.Int32)">
            <summary>
            	Trims the text to a provided maximum length.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "maxLength">Maximum length.</param>
            <returns></returns>
            <remarks>
            	Proposed by Rene Schulte
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.TrimToMaxLength(System.String,System.Int32,System.String)">
            <summary>
            	Trims the text to a provided maximum length and adds a suffix if required.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "maxLength">Maximum length.</param>
            <param name = "suffix">The suffix.</param>
            <returns></returns>
            <remarks>
            	Proposed by Rene Schulte
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            	Determines whether the comparison value strig is contained within the input value string
            </summary>
            <param name = "inputValue">The input value.</param>
            <param name = "comparisonValue">The comparison value.</param>
            <param name = "comparisonType">Type of the comparison to allow case sensitive or insensitive comparison.</param>
            <returns>
            	<c>true</c> if input value contains the specified value, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ContainsEquivalenceTo(System.String,System.String)">
            <summary>
            	Determines whether the comparison value string is contained within the input value string without any
                consideration about the case (<see cref="F:System.StringComparison.InvariantCultureIgnoreCase"/>).
            </summary>
            <param name = "inputValue">The input value.</param>
            <param name = "comparisonValue">The comparison value.  Case insensitive</param>
            <returns>
            	<c>true</c> if input value contains the specified value (case insensitive), otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.PadBoth(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            Centers a charters in this string, padding in both, left and right, by specified Unicode character,
            for a specified total lenght.
            </summary>
            <param name="value">Instance value.</param>
            <param name="width">The number of characters in the resulting string, 
            equal to the number of original characters plus any additional padding characters.
            </param>
            <param name="padChar">A Unicode padding character.</param>
            <param name="truncate">Should get only the substring of specified width if string width is 
            more than the specified width.</param>
            <returns>A new string that is equivalent to this instance, 
            but center-aligned with as many paddingChar characters as needed to create a 
            length of width paramether.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToXDocument(System.String)">
            <summary>
            	Loads the string into a LINQ to XML XDocument
            </summary>
            <param name = "xml">The XML string.</param>
            <returns>The XML document object model (XDocument)</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToXmlDOM(System.String)">
            <summary>
            	Loads the string into a XML DOM object (XmlDocument)
            </summary>
            <param name = "xml">The XML string.</param>
            <returns>The XML document object model (XmlDocument)</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToXPath(System.String)">
            <summary>
            	Loads the string into a XML XPath DOM (XPathDocument)
            </summary>
            <param name = "xml">The XML string.</param>
            <returns>The XML XPath document object model (XPathNavigator)</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToXElement(System.String)">
            <summary>
                Loads the string into a LINQ to XML XElement
            </summary>
            <param name = "xml">The XML string.</param>
            <returns>The XML element object model (XElement)</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.Reverse(System.String)">
            <summary>
            	Reverses / mirrors a string.
            </summary>
            <param name = "value">The string to be reversed.</param>
            <returns>The reversed string</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.EnsureStartsWith(System.String,System.String)">
            <summary>
            	Ensures that a string starts with a given prefix.
            </summary>
            <param name = "value">The string value to check.</param>
            <param name = "prefix">The prefix value to check for.</param>
            <returns>The string value including the prefix</returns>
            <example>
            	<code>
            		var extension = "txt";
            		var fileName = string.Concat(file.Name, extension.EnsureStartsWith("."));
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.EnsureEndsWith(System.String,System.String)">
            <summary>
            	Ensures that a string ends with a given suffix.
            </summary>
            <param name = "value">The string value to check.</param>
            <param name = "suffix">The suffix value to check for.</param>
            <returns>The string value including the suffix</returns>
            <example>
            	<code>
            		var url = "http://www.pgk.de";
            		url = url.EnsureEndsWith("/"));
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.Repeat(System.String,System.Int32)">
            <summary>
            	Repeats the specified string value as provided by the repeat count.
            </summary>
            <param name = "value">The original string.</param>
            <param name = "repeatCount">The repeat count.</param>
            <returns>The repeated string</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IsNumeric(System.String)">
            <summary>
            	Tests whether the contents of a string is a numeric value
            </summary>
            <param name = "value">String to check</param>
            <returns>
            	Boolean indicating whether or not the string contents are numeric
            </returns>
            <remarks>
            	Contributed by Kenneth Scott
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ExtractDigits(System.String)">
            <summary>
            	Extracts all digits from a string.
            </summary>
            <param name = "value">String containing digits to extract</param>
            <returns>
            	All digits contained within the input string
            </returns>
            <remarks>
            	Contributed by Kenneth Scott
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ConcatWith(System.String,System.String[])">
            <summary>
            	Concatenates the specified string value with the passed additional strings.
            </summary>
            <param name = "value">The original value.</param>
            <param name = "values">The additional string values to be concatenated.</param>
            <returns>The concatenated string.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToGuid(System.String)">
            <summary>
            	Convert the provided string to a Guid value.
            </summary>
            <param name = "value">The original string value.</param>
            <returns>The Guid</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToGuidSave(System.String)">
            <summary>
            	Convert the provided string to a Guid value and returns Guid.Empty if conversion fails.
            </summary>
            <param name = "value">The original string value.</param>
            <returns>The Guid</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToGuidSave(System.String,System.Guid)">
            <summary>
            	Convert the provided string to a Guid value and returns the provided default value if the conversion fails.
            </summary>
            <param name = "value">The original string value.</param>
            <param name = "defaultValue">The default value.</param>
            <returns>The Guid</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.GetBefore(System.String,System.String)">
            <summary>
            	Gets the string before the given string parameter.
            </summary>
            <param name = "value">The default value.</param>
            <param name = "x">The given string parameter.</param>
            <returns></returns>
            <remarks>Unlike GetBetween and GetAfter, this does not Trim the result.</remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.GetBetween(System.String,System.String,System.String)">
            <summary>
            	Gets the string between the given string parameters.
            </summary>
            <param name = "value">The source value.</param>
            <param name = "x">The left string sentinel.</param>
            <param name = "y">The right string sentinel</param>
            <returns></returns>
            <remarks>Unlike GetBefore, this method trims the result</remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.GetAfter(System.String,System.String)">
            <summary>
            	Gets the string after the given string parameter.
            </summary>
            <param name = "value">The default value.</param>
            <param name = "x">The given string parameter.</param>
            <returns></returns>
            <remarks>Unlike GetBefore, this method trims the result</remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.Join``1(System.String,``0[])">
            <summary>
            	A generic version of System.String.Join()
            </summary>
            <typeparam name = "T">
            	The type of the array to join
            </typeparam>
            <param name = "separator">
            	The separator to appear between each element
            </param>
            <param name = "value">
            	An array of values
            </param>
            <returns>
            	The join.
            </returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.RemoveSpecialCharacters(System.String)">
            <summary>
            Xóa các ký tự đặt biệt
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IsEmptyOrWhiteSpace(System.String)">
            <summary>Finds out if the specified string contains null, empty or consists only of white-space characters</summary>
            <param name = "value">The input string</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IsNotEmptyOrWhiteSpace(System.String)">
            <summary>Determines whether the specified string is not null, empty or consists only of white-space characters</summary>
            <param name = "value">The string value to check</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IfEmptyOrWhiteSpace(System.String,System.String)">
            <summary>Checks whether the string is null, empty or consists only of white-space characters and returns a default value in case</summary>
            <param name = "value">The string to check</param>
            <param name = "defaultValue">The default value</param>
            <returns>Either the string or the default value</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToUpperFirstLetter(System.String)">
            <summary>Uppercase First Letter</summary>
            <param name = "value">The string value to process</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.SubstringFrom(System.String,System.Int32)">
            <summary>Returns the right part of the string from index.</summary>
            <param name="value">The original value.</param>
            <param name="index">The start index for substringing.</param>
            <returns>The right part.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>Convert text's case to a title case</summary>
            <remarks>UppperCase characters is the source string after the first of each word are lowered, unless the word is exactly 2 characters</remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToHtmlSafe(System.String)">
            <summary>
            Makes the current instance HTML safe.
            </summary>
            <param name="s">The current instance.</param>
            <returns>An HTML safe string.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToHtmlSafe(System.String,System.Boolean)">
            <summary>
            Makes the current instance HTML safe.
            </summary>
            <param name="s">The current instance.</param>
            <param name="all">Whether to make all characters entities or just those needed.</param>
            <returns>An HTML safe string.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToHtmlSafe(System.String,System.Boolean,System.Boolean)">
            <summary>
            Makes the current instance HTML safe.
            </summary>
            <param name="s">The current instance.</param>
            <param name="all">Whether to make all characters entities or just those needed.</param>
            <param name="replace">Whether or not to encode spaces and line breaks.</param>
            <returns>An HTML safe string.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.EquivalentTo(System.String,System.String)">
            <summary>
            Returns true if strings are equals, without consideration to case (<see cref="F:System.StringComparison.InvariantCultureIgnoreCase"/>)
            </summary>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String})">
            <summary>
            Replace all values in string
            </summary>
            <param name="value">The input string.</param>
            <param name="oldValues">List of old values, which must be replaced</param>
            <param name="replacePredicate">Function for replacement old values</param>
            <returns>Returns new string with the replaced values</returns>
            <example>
            	<code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    str = str.ReplaceAll(achromaticColors, v => "[" + v + "]");
                    // str == "[White] Red Blue Green Yellow [Black] [Gray]"
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Replace all values in string
            </summary>
            <param name="value">The input string.</param>
            <param name="oldValues">List of old values, which must be replaced</param>
            <param name="newValue">New value for all old values</param>
            <returns>Returns new string with the replaced values</returns>
            <example>
            	<code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    str = str.ReplaceAll(achromaticColors, "[AchromaticColor]");
                    // str == "[AchromaticColor] Red Blue Green Yellow [AchromaticColor] [AchromaticColor]"
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Replace all values in string
            </summary>
            <param name="value">The input string.</param>
            <param name="oldValues">List of old values, which must be replaced</param>
            <param name="newValues">List of new values</param>
            <returns>Returns new string with the replaced values</returns>
            <example>
            	<code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    var exquisiteColors = new[] {"FloralWhite", "Bistre", "DavyGrey"};
                    str = str.ReplaceAll(achromaticColors, exquisiteColors);
                    // str == "FloralWhite Red Blue Green Yellow Bistre DavyGrey"
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks> 
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IsMatchingTo(System.String,System.String)">
            <summary>
            	Uses regular expressions to determine if the string matches to a given regex pattern.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <returns>
            	<c>true</c> if the value is matching to the specified pattern; otherwise, <c>false</c>.
            </returns>
            <example>
            	<code>
            		var s = "12345";
            		var isMatching = s.IsMatchingTo(@"^\d+$");
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IsMatchingTo(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            	Uses regular expressions to determine if the string matches to a given regex pattern.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "options">The regular expression options.</param>
            <returns>
            	<c>true</c> if the value is matching to the specified pattern; otherwise, <c>false</c>.
            </returns>
            <example>
            	<code>
            		var s = "12345";
            		var isMatching = s.IsMatchingTo(@"^\d+$");
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ReplaceWith(System.String,System.String,System.String)">
            <summary>
            	Uses regular expressions to replace parts of a string.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "replaceValue">The replacement value.</param>
            <returns>The newly created string</returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ReplaceWith(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            	Uses regular expressions to replace parts of a string.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "replaceValue">The replacement value.</param>
            <param name = "options">The regular expression options.</param>
            <returns>The newly created string</returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ReplaceWith(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            	Uses regular expressions to replace parts of a string.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "evaluator">The replacement method / lambda expression.</param>
            <returns>The newly created string</returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ReplaceWith(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            	Uses regular expressions to replace parts of a string.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "options">The regular expression options.</param>
            <param name = "evaluator">The replacement method / lambda expression.</param>
            <returns>The newly created string</returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.GetMatches(System.String,System.String)">
            <summary>
            	Uses regular expressions to determine all matches of a given regex pattern.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <returns>A collection of all matches</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.GetMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            	Uses regular expressions to determine all matches of a given regex pattern.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "options">The regular expression options.</param>
            <returns>A collection of all matches</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.GetMatchingValues(System.String,System.String)">
            <summary>
            	Uses regular expressions to determine all matches of a given regex pattern and returns them as string enumeration.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <returns>An enumeration of matching strings</returns>
            <example>
            	<code>
            		var s = "12345";
            		foreach(var number in s.GetMatchingValues(@"\d")) {
            		Console.WriteLine(number);
            		}
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.GetMatchingValues(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            	Uses regular expressions to determine all matches of a given regex pattern and returns them as string enumeration.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "options">The regular expression options.</param>
            <returns>An enumeration of matching strings</returns>
            <example>
            	<code>
            		var s = "12345";
            		foreach(var number in s.GetMatchingValues(@"\d")) {
            		Console.WriteLine(number);
            		}
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.Split(System.String,System.String)">
            <summary>
            	Uses regular expressions to split a string into parts.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <returns>The splitted string array</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            	Uses regular expressions to split a string into parts.
            </summary>
            <param name = "value">The input string.</param>
            <param name = "regexPattern">The regular expression pattern.</param>
            <param name = "options">The regular expression options.</param>
            <returns>The splitted string array</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.GetWords(System.String)">
            <summary>
            	Splits the given string into words and returns a string array.
            </summary>
            <param name = "value">The input string.</param>
            <returns>The splitted string array</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.GetWordByIndex(System.String,System.Int32)">
            <summary>
            	Gets the nth "word" of a given string, where "words" are substrings separated by a given separator
            </summary>
            <param name = "value">The string from which the word should be retrieved.</param>
            <param name = "index">Index of the word (0-based).</param>
            <returns>
            	The word at position n of the string.
            	Trying to retrieve a word at a position lower than 0 or at a position where no word exists results in an exception.
            </returns>
            <remarks>
            	Originally contributed by MMathews
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.AdjustInput(System.String)">
            <summary>
            Removed all special characters from the string.
            </summary>
            <param name="value">The input string.</param>
            <returns>The adjusted string.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.SpaceOnUpper(System.String)">
            <summary>
            Add space on every upper character
            </summary>
            <param name="value">The input string.</param>
            <returns>The adjusted string.</returns>
            <remarks>
            	Contributed by Michael T, http://about.me/MichaelTran
            </remarks>
        </member>
        <member name="T:KFLibrary.DataTypes.Extensions.StringExtension.ComparsionTemplateOptions">
            <summary>
            Options to match the template with the original string
            </summary>
        </member>
        <member name="F:KFLibrary.DataTypes.Extensions.StringExtension.ComparsionTemplateOptions.Default">
            <summary>
            Free template comparsion
            </summary>
        </member>
        <member name="F:KFLibrary.DataTypes.Extensions.StringExtension.ComparsionTemplateOptions.FromStart">
            <summary>
            Template compared from beginning of input string
            </summary>
        </member>
        <member name="F:KFLibrary.DataTypes.Extensions.StringExtension.ComparsionTemplateOptions.AtTheEnd">
            <summary>
            Template compared with the end of input string
            </summary>
        </member>
        <member name="F:KFLibrary.DataTypes.Extensions.StringExtension.ComparsionTemplateOptions.Whole">
            <summary>
            Template compared whole with input string
            </summary>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ExtractArguments(System.String,System.String,KFLibrary.DataTypes.Extensions.StringExtension.ComparsionTemplateOptions,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Extract arguments from string by template
            </summary>
            <param name="value">The input string. For example, "My name is Aleksey".</param>
            <param name="template">Template with arguments in the format {№}. For example, "My name is {0} {1}.".</param>
            <param name="compareTemplateOptions">Template options for compare with input string.</param>
            <param name="regexOptions">Regex options.</param>
            <returns>Returns parsed arguments.</returns>
            <example>
            	<code>
            		var str = "My name is Aleksey Nagovitsyn. I'm from Russia.";
            		var args = str.ExtractArguments(@"My name is {1} {0}. I'm from {2}.");
                    // args[i] is [Nagovitsyn, Aleksey, Russia]
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ExtractGroupArguments(System.String,System.String,KFLibrary.DataTypes.Extensions.StringExtension.ComparsionTemplateOptions,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Extract arguments as regex groups from string by template
            </summary>
            <param name="value">The input string. For example, "My name is Aleksey".</param>
            <param name="template">Template with arguments in the format {№}. For example, "My name is {0} {1}.".</param>
            <param name="compareTemplateOptions">Template options for compare with input string.</param>
            <param name="regexOptions">Regex options.</param>
            <returns>Returns parsed arguments as regex groups.</returns>
            <example>
            	<code>
            		var str = "My name is Aleksey Nagovitsyn. I'm from Russia.";
            		var groupArgs = str.ExtractGroupArguments(@"My name is {1} {0}. I'm from {2}.");
                    // groupArgs[i].Value is [Nagovitsyn, Aleksey, Russia]
            	</code>
            </example>
            <remarks>
            	Contributed by nagits, http://about.me/AlekseyNagovitsyn
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToBytes(System.String)">
            <summary>
            	Converts the string to a byte-array using the default encoding
            </summary>
            <param name = "value">The input string.</param>
            <returns>The created byte array</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            	Converts the string to a byte-array using the supplied encoding
            </summary>
            <param name = "value">The input string.</param>
            <param name = "encoding">The encoding to be used.</param>
            <returns>The created byte array</returns>
            <example>
            	<code>
            		var value = "Hello World";
            		var ansiBytes = value.ToBytes(Encoding.GetEncoding(1252)); // 1252 = ANSI
            		var utf8Bytes = value.ToBytes(Encoding.UTF8);
            	</code>
            </example>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.EncodeBase64(System.String)">
            <summary>
            	Encodes the input value to a Base64 string using the default encoding.
            </summary>
            <param name = "value">The input value.</param>
            <returns>The Base 64 encoded string</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.EncodeBase64(System.String,System.Text.Encoding)">
            <summary>
            	Encodes the input value to a Base64 string using the supplied encoding.
            </summary>
            <param name = "value">The input value.</param>
            <param name = "encoding">The encoding.</param>
            <returns>The Base 64 encoded string</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.DecodeBase64(System.String)">
            <summary>
            	Decodes a Base 64 encoded value to a string using the default encoding.
            </summary>
            <param name = "encodedValue">The Base 64 encoded value.</param>
            <returns>The decoded string</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.DecodeBase64(System.String,System.Text.Encoding)">
            <summary>
            	Decodes a Base 64 encoded value to a string using the supplied encoding.
            </summary>
            <param name = "encodedValue">The Base 64 encoded value.</param>
            <param name = "encoding">The encoding.</param>
            <returns>The decoded string</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:KFLibrary.DataTypes.Extensions.StringExtension.ParseStringToEnum``1(System.String,System.Boolean)" -->
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IsItemInEnum``1(System.String)">
            <summary>
                To check whether the data is defined in the given enum.
            </summary>
            <typeparam name="TEnum">The enum will use to check, the data defined.</typeparam>
            <param name="dataToCheck">To match against enum.</param>
            <returns>Anonoymous method for the condition.</returns>
            <remarks>
            	Contributed by Mohammad Rahman, http://mohammad-rahman.blogspot.com/
            </remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.RemoveLeft(System.String,System.Int32)">
            <summary>
            Return the string with the leftmost number_of_characters characters removed.
            </summary>
            <param name="str">The string being extended</param>
            <param name="number_of_characters">The number of characters to remove.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.RemoveRight(System.String,System.Int32)">
            <summary>
            Return the string with the rightmost number_of_characters characters removed.
            </summary>
            <param name="str">The string being extended</param>
            <param name="number_of_characters">The number of characters to remove.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.EncryptToByteArray(System.String,System.String)">
            <summary>
            Encrypt this string into a byte array.
            </summary>
            <param name="plain_text">The string being extended and that will be encrypted.</param>
            <param name="password">The password to use then encrypting the string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.DecryptFromByteArray(System.Byte[],System.String)">
            <summary>
            Decrypt the encryption stored in this byte array.
            </summary>
            <param name="encrypted_bytes">The byte array to decrypt.</param>
            <param name="password">The password to use when decrypting.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.EncryptToString(System.String,System.String)">
            <summary>
            Encrypt this string and return the result as a string of hexadecimal characters.
            </summary>
            <param name="plain_text">The string being extended and that will be encrypted.</param>
            <param name="password">The password to use then encrypting the string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.DecryptFromString(System.String,System.String)">
            <summary>
            Decrypt the encryption stored in this string of hexadecimal values.
            </summary>
            <param name="encrypted_bytes_string">The hexadecimal string to decrypt.</param>
            <param name="password">The password to use then encrypting the string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.CryptBytes(System.String,System.Byte[],System.Boolean)">
            <summary>
            Encrypt or decrypt a byte array using the TripleDESCryptoServiceProvider crypto provider and Rfc2898DeriveBytes to build the key and initialization vector.
            </summary>
            <param name="password">The password string to use in encrypting or decrypting.</param>
            <param name="in_bytes">The array of bytes to encrypt.</param>
            <param name="encrypt">True to encrypt, False to decrypt.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.MakeKeyAndIV(System.String,System.Byte[],System.Int32,System.Int32,System.Byte[]@,System.Byte[]@)">
            <summary>
            Use the password to generate key bytes and an initialization vector with Rfc2898DeriveBytes.
            </summary>
            <param name="password">The input password to use in generating the bytes.</param>
            <param name="salt">The input salt bytes to use in generating the bytes.</param>
            <param name="key_size_bits">The input size of the key to generate.</param>
            <param name="block_size_bits">The input block size used by the crypto provider.</param>
            <param name="key">The output key bytes to generate.</param>
            <param name="iv">The output initialization vector to generate.</param>
            <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.BytesToHexString(System.Byte[])">
            <summary>
            Convert a byte array into a hexadecimal string representation.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.HexStringToBytes(System.String)">
            <summary>
            Convert this string containing hexadecimal into a byte array.
            </summary>
            <param name="str">The hexadecimal string to convert.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.DefaultIfNullOrEmpty(System.String,System.String)">
            <summary>
            Returns a default value if the string is null or empty.
            </summary>
            <param name="s">Original String</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ExceptionIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the string value is empty.
            </summary>
            <param name="obj">The value to test.</param>
            <param name="message">The message to display if the value is null.</param>
            <param name="name">The name of the parameter being tested.</param>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.JoinNotNullOrEmpty(System.String[],System.String)">
            <summary>
            Joins  the values of a string array if the values are not null or empty.
            </summary>
            <param name="objs">The string array used for joining.</param>
            <param name="separator">The separator to use in the joined string.</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ParseCommandlineParams(System.String[])">
            <summary>
            Parses the commandline params.
            </summary>
            <param name="value">The value.</param>
            <returns>A StringDictionary type object of command line parameters.</returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.EncodeEmailAddress(System.String)">
            <summary>
            Encodes the email address so that the link is still valid, but the email address is useless for email harvsters.
            </summary>
            <param name="emailAddress">The email address.</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.GetSHA1Hash(System.String)">
            <summary>
            Calculates the SHA1 hash of the supplied string and returns a base 64 string.
            </summary>
            <param name="stringToHash">String that must be hashed.</param>
            <returns>The hashed string or null if hashing failed.</returns>
            <exception cref="T:System.ArgumentException">Occurs when stringToHash or key is null or empty.</exception>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ContainsAny(System.String,System.String[])">
            <summary>
            Determines whether the string contains any of the provided values.
            </summary>
            <param name="this"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ContainsAny(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether the string contains any of the provided values.
            </summary>
            <param name="this"></param>
            <param name="comparisonType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ContainsAll(System.String,System.String[])">
            <summary>
            Determines whether the string contains all of the provided values.
            </summary>
            <param name="this"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ContainsAll(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether the string contains all of the provided values.
            </summary>
            <param name="this"></param>
            <param name="comparisonType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.EqualsAny(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines whether the string is equal to any of the provided values.
            </summary>
            <param name="this"></param>
            <param name="comparisonType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.IsLike(System.String,System.String)">
            <summary>
            Wildcard comparison
            </summary>
            <param name="this"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.DataTypes.Extensions.StringExtension.ConvertToUnsign(System.String)">
            <summary>
            Chuyển tiếng Việt có dấu thành không dấu
            </summary>
            <param name="str">Chuỗi tiếng việt cần chuyển</param>
            <returns>Kết quả tiếng việt không dấu</returns>
        </member>
        <member name="T:KFLibrary.DataTypes.IConverter`1">
            <summary>
            	Generic converter interface used to allow extension methods to be applied.
            </summary>
            <typeparam name = "T"></typeparam>
        </member>
        <member name="P:KFLibrary.DataTypes.IConverter`1.Value">
            <summary>
            	Gets the internal value to be converted.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:KFLibrary.Encryptions.Encrypt.MD5_Encode(System.String)">
            <summary>
            Hàm mã hóa chuỗi theo MD5
            </summary>
            <param name="strSource">Chuỗi nguồn cần mã hóa</param>
            <returns>Chuỗi đã được mã hóa theo MD5</returns>
        </member>
        <member name="M:KFLibrary.Encryptions.Encrypt.MD5_Verify(System.String,System.String)">
            <summary>
            Hàm so sánh chuỗi nguồn với chuỗi đã được mã hóa theo MD5
            </summary>
            <param name="strSource">Chuỗi nguồn cần so sánh</param>
            <param name="hashSource">Chuỗi đã được mã hóa</param>
            <returns>Đúng khi chuỗi nguồn bằng với chuỗi đã được mã hóa, và ngược lại</returns>
        </member>
        <member name="T:KFLibrary.Win.WinForm.App.SingleApplication">
            <summary>
            Summary description for SingleApp.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.App.SingleApplication.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            Imports 
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.App.SingleApplication.GetCurrentInstanceWindowHandle">
            <summary>
            GetCurrentInstanceWindowHandle
            </summary>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.Win.WinForm.App.SingleApplication.SwitchToCurrentInstance">
            <summary>
            SwitchToCurrentInstance
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.App.SingleApplication.Run(System.Windows.Forms.Form)">
            <summary>
            Execute a form base application if another instance already running on
            the system activate previous one
            </summary>
            <param name="frmMain">main form</param>
            <returns>true if no previous instance is running</returns>
        </member>
        <member name="M:KFLibrary.Win.WinForm.App.SingleApplication.Run">
            <summary>
            for console base application
            </summary>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.Win.WinForm.App.SingleApplication.IsAlreadyRunning">
            <summary>
            check if given exe alread running or not
            </summary>
            <returns>returns true if already running</returns>
        </member>
        <member name="F:KFLibrary.Win.WinForm.DevEx.Controls.AboutControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.AboutControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.AboutControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.MaBenhNhan.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KFLibrary.Win.WinForm.DevEx.Controls.MaBenhNhan"/> class.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.MaBenhNhan.SoKhamBenh_Load(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event of the MaBenhNhan control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:KFLibrary.Win.WinForm.DevEx.Controls.MaBenhNhan.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.MaBenhNhan.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.MaBenhNhan.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:KFLibrary.Win.WinForm.DevEx.Controls.MessageControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.MessageControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.MessageControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:KFLibrary.Win.WinForm.DevEx.Controls.RibbonForm1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.RibbonForm1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.RibbonForm1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:KFLibrary.Win.WinForm.DevEx.Controls.SoTheBhyt.ReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.SoTheBhyt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:KFLibrary.Win.WinForm.DevEx.Controls.SoTheBhyt"/> class.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.SoTheBhyt.SoTheBHYT_Load(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event of the SoTheBHYT control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:KFLibrary.Win.WinForm.DevEx.Controls.SoTheBhyt.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.SoTheBhyt.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.SoTheBhyt.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:KFLibrary.Win.WinForm.DevEx.Controls.ThongTinBenhNhanNoiTru.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.ThongTinBenhNhanNoiTru.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.ThongTinBenhNhanNoiTru.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:KFLibrary.Win.WinForm.DevEx.Controls.WaitFormEx.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.WaitFormEx.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Controls.WaitFormEx.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions">
            <summary>
            Thư viện các hàm Extension dành cho các loại XtraEditor Control của DevExpress
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.AutoSize(DevExpress.XtraEditors.Repository.RepositoryItemLookUpEdit)">
            <summary>
            Tự động điều chỉnh độ rộng và độ cao của RepositoryItemLookUpEdit khi PopUp.
            </summary>
            <param name="lookUpEdit"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.AutoSize(DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit)">
            <summary>
            Tự động điều chỉnh độ rộng và độ cao của RepositoryItemGridLookUpEdit khi PopUp.
            </summary>
            <param name="gridLookUpEdit"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.AutoSize(DevExpress.XtraEditors.GridLookUpEdit)">
            <summary>
            Tự động điều chỉnh độ rộng và độ cao của GridLookUpEdit khi PopUp.
            </summary>
            <param name="gridLookUpEdit"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.AutoSize(DevExpress.XtraEditors.LookUpEdit)">
            <summary>
            Tự động điều chỉnh độ rộng và độ cao của LookUpEdit khi PopUp.
            </summary>
            <param name="lookUpEdit"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.gridLookUpEdit_QueryPopUp(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Sự kiện QueryPopUp
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.SearchAllVisibleColumns(DevExpress.XtraEditors.GridLookUpEdit)">
            <summary>
            Hàm tìm kiếm giá trị tương đồng trên tất cả các cột đang hiển thị trên GridLookUpEdit
            </summary>
            <param name="gridLookUpEdit"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.SearchAllVisibleColumns(DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit)">
            <summary>
            Hàm tìm kiếm giá trị tương đồng trên tất cả các cột đang hiển thị trên RepositoryItemGridLookUpEdit
            </summary>
            <param name="gridLookUpEdit"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.FilterLookup(System.Object)">
            <summary>
            Hàm tìm kiếm các giá trị tương đồng với ô text đang nhập
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.UseEmbeddedNavigator(DevExpress.XtraEditors.GridLookUpEdit)">
            <summary>
            Hàm hiển thị EmbeddedNavigator
            </summary>
            <param name="gridLookUpEdit"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.gridLookUpEdit_Popup(System.Object,System.EventArgs)">
            <summary>
            Hàm hiển thị UseEmbeddedNavigator trên gridLookUpEdit
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.AutoSize(DevExpress.XtraEditors.CheckedComboBoxEdit)">
            <summary>
            Hàm tự động tính toán và gán giá trị độ rộng cho CheckedComboBoxEdit
            </summary>
            <param name="checkCmbo"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.AutoSize(DevExpress.XtraEditors.CheckedComboBoxEdit,System.Boolean)">
            <summary>
            Hàm tự động tính toán và gán giá trị độ dài cho CheckedComboBoxEdit
            </summary>
            <param name="gridLookUpEdit">GridLookUpEdit sử dụng</param>
            <param name="gridLookUpEdit">addsearchText giá trị true là add thêm text để search dữ liệu</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.checkCmbo_QueryPopUp(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Sự kiện QueryPopUp
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.BestFitResizePopup(DevExpress.XtraEditors.LookUpEditBase)">
            <summary>
            Tự động điều chỉnh độ rộng của LookupEdit khi PopUp.
            </summary>
            <param name="editor">Control LookupEditBase</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.BestFitResizePopup(DevExpress.XtraEditors.LookUpEditBase,System.Drawing.Size)">
            <summary>
            Tự động điều chỉnh độ rộng của LookupEdit khi PopUp.
            </summary>
            <param name="editor">Control LookupEditBase</param>
            <param name="size">Kích thước tùy chọn</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraEditorExtensions.BestFitResizePopup(DevExpress.XtraEditors.Repository.RepositoryItemLookUpEditBase)">
            <summary>
            Tự động điều chỉnh độ rộng của LookupEdit khi PopUp.
            </summary>
            <param name="editor">Control LookupEditBase</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraGridExtensions.SetStyleColumnHeader(DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn,System.Boolean,DevExpress.Utils.AppearanceObject)">
            <summary>
            Sets the style column header.
            </summary>
            <param name="p_Col">The p_ col.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraGridExtensions.SetStyleBandHeader(DevExpress.XtraGrid.Views.BandedGrid.GridBand,System.Boolean)">
            <summary>
            Sets the style band header.
            </summary>
            <param name="p_GridBand">The p_ grid band.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraGridExtensions.AddGridBandToAdvGridView(DevExpress.XtraGrid.Views.BandedGrid.AdvBandedGridView,System.String,System.String,System.Byte,System.Boolean,DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn,System.Boolean,DevExpress.XtraGrid.GridColumnSummaryItem,DevExpress.XtraGrid.Views.BandedGrid.GridBand,System.Boolean,System.Boolean)">
            <summary>
            Adds the grid band to AdvGridView.
            </summary>
            <param name="p_View">The p_ view.</param>
            <param name="p_BandCaption">The p_ band caption.</param>
            <param name="p_BandName">Name of the p_ band.</param>
            <param name="p_BandRowCount">The p_ band row count.</param>
            <param name="p_UseStyleBand">if set to <c>true</c> [p_ use style band].</param>
            <param name="p_Col">The p_ col.</param>
            <param name="p_UseStyleColumn">if set to <c>true</c> [p_ use style column].</param>
            <param name="p_ColSummary">The p_ col summary.</param>
            <param name="p_ParentBand">The p_ parent band.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraGridExtensions.DanhSoThuTuColumn(DevExpress.XtraGrid.Views.BandedGrid.BandedGridView,DevExpress.XtraGrid.Views.Base.DragObjectDropEventArgs)">
            <summary>
            Đánh số thứ tự cột
            </summary>
            <param name="p_View">The p_ view.</param>
            <param name="p_EventArgs">The <see cref="T:DevExpress.XtraGrid.Views.Base.DragObjectDropEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraGridExtensions.ModifyCustomizationForm(DevExpress.XtraGrid.Views.BandedGrid.BandedGridView)">
            <summary>
            Modifies the customization form.
            </summary>
            <param name="p_View">The p_ view.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraGridExtensions.TaoCotSTT(DevExpress.XtraGrid.Views.BandedGrid.BandedGridView,DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs,System.Int32)">
            <summary>
            Tạo dữ liệu cột STT
            </summary>
            <param name="p_View">The p_ view.</param>
            <param name="p_EventArgs">The <see cref="T:DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraGridExtensions.UseEmbeddedNavigator(DevExpress.XtraEditors.GridLookUpEdit)">
            <summary>
            Hàm hiển thị EmbeddedNavigator
            </summary>
            <param name="gridLookUpEdit"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Extensions.XtraGridExtensions.gridLookUpEdit_Popup(System.Object,System.EventArgs)">
            <summary>
            Hàm hiển thị UseEmbeddedNavigator trên gridLookUpEdit
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Localization.Translater.ToVietnamese">
            <summary>
            Chuyển thành tiếng Việt.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Localization.Translater.ToEnglish">
            <summary>
            Chuyển thành tiếng Anh
            </summary>
        </member>
        <member name="T:KFLibrary.Win.WinForm.DevEx.Localization.Translater.ControlsVietnamese">
            <summary>
            Class việt hóa Controls
            </summary>
        </member>
        <member name="T:KFLibrary.Win.WinForm.DevEx.Localization.Translater.GridVietnamese">
            <summary>
            Class việt hóa GridControl
            </summary>
        </member>
        <member name="T:KFLibrary.Win.WinForm.DevEx.Localization.Translater.PreviewVietnamese">
            <summary>
            Class việt hóa Printing
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Utilities.Utilities.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Utilities.XtraGridUtils.CreateColumn(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Tạo mới GridColumn
            </summary>
            <param name="fieldName">Tên FieldName</param>
            <param name="caption">Tiêu đề Caption</param>
            <param name="isVisible"></param>
            <param name="visibleIndex"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Utilities.XtraGridUtils.SetStyleColumnHeader(DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn,System.Boolean,DevExpress.Utils.AppearanceObject)">
            <summary>
            Sets the style column header.
            </summary>
            <param name="p_Col">The p_ col.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Utilities.XtraGridUtils.SetStyleBandHeader(DevExpress.XtraGrid.Views.BandedGrid.GridBand,System.Boolean)">
            <summary>
            Sets the style band header.
            </summary>
            <param name="p_GridBand">The p_ grid band.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Utilities.XtraGridUtils.AddGridBandToAdvGridView(DevExpress.XtraGrid.Views.BandedGrid.AdvBandedGridView,System.String,System.String,System.Byte,System.Boolean,DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn,System.Boolean,DevExpress.XtraGrid.GridColumnSummaryItem,DevExpress.XtraGrid.Views.BandedGrid.GridBand,System.Boolean,System.Boolean)">
            <summary>
            Adds the grid band to AdvGridView.
            </summary>
            <param name="p_View">The p_ view.</param>
            <param name="p_BandCaption">The p_ band caption.</param>
            <param name="p_BandName">Name of the p_ band.</param>
            <param name="p_BandRowCount">The p_ band row count.</param>
            <param name="p_UseStyleBand">if set to <c>true</c> [p_ use style band].</param>
            <param name="p_Col">The p_ col.</param>
            <param name="p_UseStyleColumn">if set to <c>true</c> [p_ use style column].</param>
            <param name="p_ColSummary">The p_ col summary.</param>
            <param name="p_ParentBand">The p_ parent band.</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Utilities.XtraGridUtils.AddGridBandToBandGridView(DevExpress.XtraGrid.Views.BandedGrid.BandedGridView,System.String,System.String,System.Byte,System.Boolean,DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn,System.Boolean,DevExpress.XtraGrid.GridColumnSummaryItem,DevExpress.XtraGrid.Views.BandedGrid.GridBand,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            Hàm add band vào BandedGridView
            </summary>
            <param name="p_View">BandedGridView</param>
            <param name="p_BandCaption">Caption (tên hiển thị)</param>
            <param name="p_BandName">BandName</param>
            <param name="p_BandRowCount">Số dòng hiển thị header band. Giá trị mặc đinh = 1</param>
            <param name="p_UseStyleBand">Có sử dụng định dạng header band hay không. Giá trị mặc định = false</param>
            <param name="p_Col">BandedGridColumn. Giá trị mặc định = null</param>
            <param name="p_UseStyleColumn">Có sử dụng định dang header column hay không. Giá trị mặc định = false</param>
            <param name="p_ColSummary">GridColumnSummaryItem. Giá trị mặc định = null</param>
            <param name="p_ParentBand">Band cha. Giá trị mặc định = null</param>
            <param name="p_AllowMoveCol">Có cho phép di chuyển column hay không. Giá trị mặc định = true</param>
            <param name="p_AllowMoveBand">Có cho phép di chuyển band hay không. Giá trị mặc định = true</param>
            <param name="p_AutoAddColumn">Tự động add Column vào view. Giá trị mặc định = false</param>
            <param name="p_ColumnName">ColumnName. Giá trị mặc định = ""</param>
            <param name="p_ColumnFieldName">FieldName của column. Giá trị mặc định = ""</param>
            <param name="index">Índex để add column. Giá trị mặc định = 0</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Utilities.XtraGridUtils.TaoCotSTT(DevExpress.XtraGrid.Views.BandedGrid.AdvBandedGridView,DevExpress.XtraGrid.Views.Base.CustomColumnDataEventArgs,System.Int32)">
            <summary>
            Tạo cột STT dạng UnboundColumn
            </summary>
            <param name="p_View"></param>
            <param name="p_EventArgs"></param>
            <param name="p_StartNum"></param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Utilities.XtraGridUtils.SetTypeColumn_Band(DevExpress.XtraGrid.Views.BandedGrid.GridBand,System.Int32,DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn,DevExpress.Utils.HorzAlignment,DevExpress.Utils.WordWrap,DevExpress.XtraEditors.Repository.RepositoryItem,System.Boolean,DevExpress.Data.SummaryItemType,System.String)">
            <summary>
            Hàm canh chỉnh band, column trên grid
            </summary>
            <param name="band">Band</param>
            <param name="w_band">độ rộng của band</param>
            <param name="col">Cột</param>
            <param name="horAlignment">Canh chỉnh trái, phải, giữa</param>
            <param name="wrap">Kiểu wrapText</param>
            <param name="edit">Gán ColumnEdit</param>
            <param name="isSumary">Có summary hay không</param>
            <param name="summaryType">Kiểu summary là sum hoặc count, ....</param>
            <param name="strFormat">chuỗi định dạng DisplayFormat cho summary</param>
        </member>
        <member name="M:KFLibrary.Win.WinForm.DevEx.Utilities.XtraGridUtils.FindBand(System.String,DevExpress.XtraGrid.Views.BandedGrid.GridBand)">
            <summary>
            Hàm tìm Band trên Grid theo tên
            </summary>
            <param name="name">Tên band</param>
            <param name="band">GridBand cần tìm (parentBand)</param>
            <returns></returns>
        </member>
        <member name="P:KFLibrary.Win.WinForm.Utilities.FullScreen.IsFullScreen">
            <summary>
            Xác định có đang ở chế độ Fullscreen không?
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.Utilities.FullScreen.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.Utilities.FullScreen.EnterFullScreen(System.Windows.Forms.Form)">
            <summary>
            Chuyển form sang chế độ fullscreen.
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.Utilities.FullScreen.Save(System.Windows.Forms.Form)">
            <summary>
            Lưu trạng thái hiện tại của form
            </summary>
        </member>
        <member name="M:KFLibrary.Win.WinForm.Utilities.FullScreen.LeaveFullScreen(System.Windows.Forms.Form)">
            <summary>
            Leave the full screen mode and restore the original window state.
            </summary>
        </member>
        <member name="M:KFLibrary.Net.Mail.MailExtension.SaveEML(System.Net.Mail.MailMessage,System.String)">
            <summary>
            Converts a MailMessage to an EML file stream.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:KFLibrary.Offices.ExcelManager.BorderLineStyle">
            <summary>
            Line style options
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.ShowExcelProgram">
            <summary>
            Show/Hide excel program.
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.StandardFont">
            <summary>
            Get/Set font chữ mặc định.
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.StandardFontSize">
            <summary>
            Get/Set kích cỡ font chữ mặc định.
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.DisplayAlerts">
            <summary>
            Get/Set display alerts.
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.ScreenUpdating">
            <summary>
            Get/Set screen updating.
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.DefaultSaveFormat">
            <summary>
            Get/Set định dạng mặc định khi save.
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.ActiveWorksheet">
            <summary>
            Get Active worksheet
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.WorksheetCount">
            <summary>
            Get the current number of worksheets
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.WorksheetNames">
            <summary>
            Return a list of worksheet names
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.WorksheetBlank">
            <summary>
            Returns whether a worksheet has any values or not. Cells with white space are considered to be empty
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.DisplayGridLines">
            <summary>
            Get/Set display gridlines
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.GetRangeAddress">
            <summary>
            Get the address of current range you are working with
            </summary>
        </member>
        <member name="P:KFLibrary.Offices.ExcelManager.UseLamTronSo">
            <summary>
            Biến dùng để làm tròn số.
            Trường hợp Hậu Giang thì luôn làm tròn số.
            Khung không làm tròn mà lấy giá trị thực.
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.#ctor(System.String,System.Boolean)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.CleanUp">
            <summary>
            Release system resources
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.Create(System.Boolean)">
            <summary>
            Create a new excel document
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.Open(System.String,System.Boolean)">
            <summary>
            Open an exisiting excel Document
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.Close">
            <summary>
            Close Excel without saving changes
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.Save">
            <summary>
            Saves the current excel document
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.AddWorksheet(System.String)">
            <summary>
            Add a new worksheet
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.DeleteWorksheet(System.Int32)">
            <summary>
            Delete a worksheet by index. index start from 1 not 0
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.DeleteWorksheet(System.String)">
            <summary>
            Delete a worksheet by name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetCurrentWorksheet(System.String)">
            <summary>
            Set the current worksheet by name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetCurrentWorksheet(System.Int32)">
            <summary>
            Set the current worksheet by index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SelectRange(System.String,System.String)">
            <summary>
            Set the column ranges e.g A1 B30 or A1 A1 if you want.
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetRangeValue(System.Object)">
            <summary>
            Set the value of the range
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetRangeValue(System.Object[0:,0:])">
            <summary>
            Set the value of the range
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetRangeValue(System.Object[])">
            <summary>
            Set the value of the range
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.FormatRangeFont(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Double},System.Nullable{System.Drawing.Color},System.String)">
            <summary>
            Formats the font in a cell, bold italic and underline take a bool as a value.
            Fontsize font color and font type are all nullable so you can write null if you dont want to specify
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.GetCellValue(System.String)">
            <summary>
            Get the value of a cell e.g  A1
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetCellValue(System.String,System.String)">
            <summary>
            Set the value of a cell e.g  A1
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.FormatCellFont(System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Double},System.Nullable{System.Drawing.Color},System.String)">
            <summary>
            Formats the font in a cell, bold italic and underline take a bool as a value.
            Fontsize font color and font type are all nullable so you can write null if you dont want to specify
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.PrintWorksheet(System.Int32)">
            <summary>
            Prints the current worksheet
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.PrintAllWorksheets(System.Int32)">
            <summary>
            Prints all the worksheets
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.DeleteRow(Microsoft.Office.Interop.Excel.Range)">
            <summary>
            Xóa dòng trong khoảng Range.
            </summary>
            <param name="range">Vùng Range cần xử lý.</param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.DeleteColumn(Microsoft.Office.Interop.Excel.Range)">
            <summary>
            Xóa cột trong khoảng Range.
            </summary>
            <param name="range">Vùng Range cần xử lý.</param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetZoom(System.Int32)">
            <summary>
            Set độ phóng to/thu nhỏ của cửa sổ Excel.
            </summary>
            <param name="zoomPercentage">% phóng to/thu nhỏ.</param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetFontFamily(System.String)">
            <summary>
            Set font.
            </summary>
            <param name="range">Vùng Range cần xử lý.</param>
            <param name="family">Family font name.</param>
            <param name="size">Kích cỡ font.</param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetFontColor(System.Drawing.Color)">
            <summary>
            Set font style.
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetFontStyle(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set font style.
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetBackgroundColor(Microsoft.Office.Interop.Excel.Range,System.Drawing.Color)">
            <summary>
            Set màu nền.
            </summary>
            <param name="range">Vùng Range cần xử lý.</param>
            <param name="color">Màu nền.</param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetNumberFormat(System.String)">
            <summary>
            Set chuỗi định dạng số.
            </summary>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.SetBorderWeight_LineStyle(System.Int32,Microsoft.Office.Interop.Excel.XlLineStyle)">
            <summary>
            Hàm set boder đậm ở viềng ngoài, đứt quãng và màu nhẹ ở cell
            </summary>
            <param name="value"></param>
            <param name="lineStyle"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.GetRangeValue(System.String)">
            <summary>
            Returns a multidimensional array of the range
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.GridData2Excel(DevExpress.XtraGrid.Views.Grid.GridView,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Hàm xuất dữ liệu trên grid ra excel 
            </summary>
            <param name="view">Gridview cần xuất dữ liệu</param>
            <param name="startRowExcel">Hàng bắt đầu xuất excel</param>
            <param name="startColumnExcel">Cột bắt đầu xuất excel</param>
            <param name="useSummaryGroup">Có xuất dòng sum group hay không? false là không. True là có</param>
            <param name="useSummaryFooter">Có xuất dòng footer group hay không? false là không. True là có</param>
            <param name="dataRangeName">Tên range bắt đầu xuất dữ liệu</param>
            <param name="saveColumnRange">Có đặt tên cho range từng cột hay không? false là không. True là có</param>
            <param name="showSummaryGroupMaxLevel"></param>
            <param name="numberRowGroupMaxLevel"></param>
        </member>
        <member name="M:KFLibrary.Offices.ExcelManager.GetExcelTemplate(System.String)">
            <summary>
            Hàm lấy mẫu excel có sẳn
            </summary>
            <param name="pathName">Đường dẫn chứa file excel</param>
        </member>
        <member name="M:KFLibrary.Offices.WordManager.GetCurrentWordProcessId">
             <summary>
            Lưu lại các process Word hiện có, tránh kill nhầm file Word người dùng đang thao tác
             </summary>
             <returns></returns>
        </member>
        <member name="M:KFLibrary.Offices.WordManager.SeftKillProcess(System.Collections.Generic.List{System.Int32})">
             <summary>
            Kill process Word xuất lỗi, bỏ qua các process Word đã được lưu trữ
             </summary>
             <param name="lstProcessID">List Word process ID không cần kill</param>
        </member>
        <member name="M:KFLibrary.Registries.WinStartup.IsAdded(System.String,System.String)">
            <summary>
            Kiểm tra xem đã có key, application path trong registry Startup chưa?
            </summary>
            <param name="key">Key cần kiểm tra.</param>
            <param name="path">Đường dẫn tới chương trình.</param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.Registries.WinStartup.Add(System.String,System.String)">
            <summary>
            Thêm key, application path vào registry Startup
            </summary>
            <param name="key">Key cần thêm.</param>
            <param name="path">Đường dẫn tới chương trình.</param>
        </member>
        <member name="M:KFLibrary.Registries.WinStartup.Remove(System.String)">
            <summary>
            Xóa key torng registry Startup
            </summary>
            <param name="key">Key cần xóa.</param>
        </member>
        <member name="F:KFLibrary.SystemDependencies.Clock.SubstituteForNow">
            <summary>
            Set a substitute (and fix) value for Now.  See <see cref="!:SubstituteForSystemDate"/>
            for usage example.
            </summary>
        </member>
        <member name="T:KFLibrary.SystemDependencies.ExtensionMethodSetting">
            <summary>
            Allows developer to set default values for CultureInfo and Encoding
            </summary>
            <remarks>Added by Jtolar</remarks>
        </member>
        <member name="M:KFLibrary.SystemDependencies.ExtensionMethodSetting.#cctor">
            <summary>
            Initializes a static instance of the ExtensionMethodsSettings class
            </summary>
        </member>
        <member name="P:KFLibrary.SystemDependencies.ExtensionMethodSetting.DefaultEncoding">
            <summary>
            Gets or Sets the default encoding scheme extension methods should use
            </summary>
            <remarks>
            The default value for this property is <see cref="P:System.Text.Encoding.UTF8"/>
            </remarks>
        </member>
        <member name="P:KFLibrary.SystemDependencies.ExtensionMethodSetting.DefaultCulture">
            <summary>
            Gets or Sets the default culture information extension methods should use
            </summary>
            <remarks>
            The default value for this property is <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>
            </remarks>
        </member>
        <member name="P:KFLibrary.Templates.StringTemplate.Tokens">
            <summary>
            Get dictionary that's store Tokens
            </summary>
        </member>
        <member name="T:KFLibrary.Text.ChuyenMa">
            <summary>
            Summary description for ChuyenMa.
            </summary>
        </member>
        <member name="M:KFLibrary.Text.ChuyenMa.UnicodeToMultichar(System.String,System.String[],System.Boolean)">
            <summary>
            Convert Unicode vowels to an encoding like VNI or VIQR where it might take more than one
            </summary>
            <param name="p_Text"></param>
            <param name="Vowel"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.Text.ChuyenMa.MulticharToUnicode(System.String,System.String[])">
            <summary>
            Convert a multi-character vowel in VNI or VIQR to Unicode
            </summary>
            <param name="p_Text"></param>
            <param name="Vowel"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.Text.ChuyenMa.StringToString(System.String,System.String,System.String)">
            <summary>
            Direct one-to-one character mapping from one encoding to another
            </summary>
            <param name="p_Text"></param>
            <param name="Vowel1"></param>
            <param name="Vowel2"></param>
            <returns></returns>
        </member>
        <member name="M:KFLibrary.Utilities.TCPClient.HexToString(System.String,System.Text.Encoding)">
            <summary>
            Hàm chuyển từ Hex sang String
            </summary>
            <param name="hexInput">Dữ liệu Hex cần chuyển sang String</param>
            <param name="encoding">Encoding UTF-8</param>
            <returns></returns>
        </member>
    </members>
</doc>
