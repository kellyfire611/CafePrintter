//<auto-generated />

#region "Author"
/****************************************************************************************
 * Solution     : CUSC His Framework
 * Project code : APP1105
 * Author       : Dương Nguyễn Phú Cường
 * Company      : Cusc Software
 * Version      : 1.0.0.1
 * Created date : 29/03/2013
 ***************************************************************************************/
#endregion


namespace KFLibrary.Win
{
    public class LinhTinh
    {
        //#region "Load file template được nhúng vào DLL"
        //        // Load dữ liệu file template được nhúng vào DLL
        //        Stream stream = Assembly.GetExecutingAssembly()
        //            .GetManifestResourceStream(
        //                String.Format("CuscAppFramework.QLNSDanhMuc.Views.BaoCao.Template.{0}",
        //                p_TemplateFileName));

        //        // Tạo file tạm
        //        string tempFile = Path.GetTempFileName();
        //        using (FileStream fs = new FileStream(tempFile, FileMode.Open))
        //        {
        //            // Copy all bytes to temp file
        //            for (int i = 0; i < stream.Length; i++)
        //                fs.WriteByte((byte)stream.ReadByte());
        //        }

        //        // Mở template trong Excel
        //        Excel.Workbook excelBook = excel.Workbooks.Add(tempFile);

        //        // Xóa flle tạm
        //        File.Delete(tempFile);
        //        #endregion


        //private EntityConnection CreateConnectionString(string dataSource, string initialCatalog,
        //    string userId, string password, string metaData, string providerName)
        //{
        //    // Khởi tạo SqlConnectionStringBuilder
        //    SqlConnectionStringBuilder sqlBuilder = new SqlConnectionStringBuilder();

        //    // Gán các thuộc tính cho datasource
        //    sqlBuilder.DataSource = dataSource;
        //    sqlBuilder.InitialCatalog = initialCatalog;
        //    sqlBuilder.UserID = userId;
        //    sqlBuilder.Password = password;

        //    // Build SqlConnection string
        //    string providerString = sqlBuilder.ToString();

        //    // Khởi tạo EntityConnectionStringBuilder sử dụng cho Entity Framework
        //    EntityConnectionStringBuilder entityBuilder = new EntityConnectionStringBuilder();

        //    // Gán provider name
        //    entityBuilder.Provider = providerName;
        //    entityBuilder.ProviderConnectionString = providerString;

        //    // Set the Metadata location.
        //    // entityBuilder.Metadata = @"res://*/AdventureWorksModel.csdl|
        //    //                            res://*/AdventureWorksModel.ssdl|
        //    //                            res://*/AdventureWorksModel.msl";
        //    entityBuilder.Metadata = metaData;

        //    return new EntityConnection(entityBuilder.ToString());
        //}

        //// Lấy ngày trên database server
        //public DateTime GetServerDate()
        //{
        //    //ObjectContext context = new ObjectContext();

        //    //return context.CreateQuery<DateTime>("CurrentDateTime()")
        //    //    .Execute(MergeOption.NoTracking).First();
        //}

        //// Helper method to retrieve control properties. Use of 
        //// GetProperties enables undo and menu updates to work properly.
        //public static PropertyDescriptor GetPropertyByName(object component, string propName)
        //{
        //    PropertyDescriptor prop;
        //    prop = TypeDescriptor.GetProperties(component)[propName];
        //    if (null == prop)
        //        throw new ArgumentException(
        //              String.Format("Không tim thấy property \"{0}\">."),
        //              propName);
        //    else
        //        return prop;
        //}


        //public static IEnumerable<T> GetEntities<T>(this ObjectStateManager manager)
        //{
        //    var entities = manager.GetObjectStateEntries(~EntityState.Detached)
        //        .Where(entry => !entry.IsRelationship && entry.Entity != null)
        //        .Select(entry => entry.Entity).OfType<T>();
        //    return entities;
        //}

        //private void NextControl(TextEdit sender, KeyEventArgs eventArgs, Control nextControl)
        //{
        //    // Previous control
        //    if (sender.SelectionStart == 0
        //        && eventArgs.KeyCode == Keys.Left)
        //    {
        //        nextControl.Focus();
        //    }

        //    if (sender.Text.Length == 0
        //        && eventArgs.KeyCode == Keys.Back)
        //    {
        //        nextControl.Focus();
        //    }



        //private void gridView1_CustomDrawFooterCell(object sender, FooterCellCustomDrawEventArgs e)
        //{
        //    int dx = e.Bounds.Height;
        //    Brush brush = e.Cache.GetGradientBrush(e.Bounds, Color.Wheat, Color.FloralWhite,
        //      LinearGradientMode.Vertical);
        //    Rectangle r = e.Bounds;
        //    //Create a raised effect for a cell
        //    ControlPaint.DrawBorder3D(e.Graphics, r, Border3DStyle.RaisedInner);
        //    //Fill the inner region of the cell
        //    r.Inflate(-1, -1);
        //    e.Graphics.FillRectangle(brush, r);
        //    //Draw a summary value
        //    r.Inflate(-2, 0);
        //    e.Appearance.DrawString(e.Cache, e.Info.DisplayText, r);
        //    //Prevent default drawing of the cell
        //    e.Handled = true;
        //}







        //public IEnumerable<T> GetEntities<T>(ObjectStateManager manager)
        //{
        //    var entities = manager.GetObjectStateEntries(~EntityState.Detached)
        //        .Where(entry => !entry.IsRelationship && entry.Entity != null)
        //        .Select(entry => entry.Entity).OfType<T>();
        //    return entities;
        //}

        //public IEnumerable<T> GetEntities<T>(ObjectStateManager manager, EntityState state)
        //{
        //    var entities = manager.GetObjectStateEntries(state)
        //        .Where(entry => !entry.IsRelationship && entry.Entity != null)
        //        .Select(entry => entry.Entity).OfType<T>();
        //    return entities;
        //}


    }
}
